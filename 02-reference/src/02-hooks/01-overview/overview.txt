Ganchos de reacción incorporados
Los ganchos te permiten usar diferentes funciones de React de tus componentes. Puedes usar los ganchos incorporados o combinarlos para construir los tuyos propios. Esta página enumera todos los ganchos integrados en React.

Ganchos estatales
El estado permite que un componente "recuerde" información como la entrada del usuario. Por ejemplo, un componente de formulario puede usar el estado para almacenar el valor de entrada, mientras que un componente de la galería de imágenes puede usar el estado para almacenar el índice de imagen seleccionado.

Para agregar estado a un componente, use uno de estos ganchos:

useState declara una variable de estado que puede actualizar directamente.
useReducer declara una variable de estado con la lógica de actualización dentro de una función reductora.
function ImageGallery() {
  const [index, setIndex] = useState(0);
  // ...

Ganchos de contexto
El contexto permite que un componente reciba información de padres distantes sin pasarla como accesorios. Por ejemplo, el componente de nivel superior de tu aplicación puede pasar el tema de la interfaz de usuario actual a todos los componentes siguientes, independientemente de la profundidad que sea.

useContext lee y se suscribe a un contexto.
function Button() {
  const theme = useContext(ThemeContext);
  // ...

Ganchos de referencia
Las referencias permiten que un componente contenga cierta información que no se usa para la representación, como un nodo DOM o un ID de tiempo de espera. A diferencia del estado, la actualización de una referencia no vuelve a representar el componente. Los refs son una "escotilla de escape" del paradigma React. Son útiles cuando necesita trabajar con sistemas que no son de React, como las API de navegador integradas.

useRef declara una ref. Puede contener cualquier valor, pero la mayoría de las veces se usa para contener un nodo DOM.
useImperativeHandle permite personalizar la referencia expuesta por el componente. Esto rara vez se usa.

function Form() {
  const inputRef = useRef(null);
  // ...

Ganchos de efecto
Los efectos permiten que un componente se conecte y se sincronice con sistemas externos. Esto incluye tratar con la red, el DOM del navegador, las animaciones, los widgets escritos con una biblioteca de interfaz de usuario diferente y, en general, cualquier código que no sea de React.

-- useEffect conecta un componente a un sistema externo.

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]);
  // ...

Los efectos son una "escotilla de escape" del paradigma React. No utilice Effects para organizar el flujo de datos de la aplicación. Si no está interactuando con un sistema externo, es posible que no necesite un efecto.

Hay dos variaciones raramente utilizadas de useEffect con diferencias en el tiempo:

--  useLayoutEffect se activa antes de que el explorador vuelva a pintar la pantalla. Puedes medir el diseño aquí.

--  useInsertionEffect se activa antes de que React realice cambios en el DOM. Las bibliotecas pueden insertar CSS dinámico aquí.

Ganchos de rendimiento
Una forma común de optimizar el rendimiento de reprocesamiento es omitir el trabajo innecesario. Por ejemplo, puede indicar a React que reutilice un cálculo almacenado en caché o que omita un reprocesamiento si los datos no han cambiado desde el renderizado anterior.

Para omitir cálculos y volver a renderizar innecesariamente, use uno de estos ganchos:

--useMemo le permite almacenar en caché el resultado de un cálculo costoso.

--useCallback le permite almacenar en caché una definición de función antes de pasarla a un componente optimizado.

function TodoList({ todos, tab, theme }) {
  const visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);
  // ...
}

A veces, no puede omitir la re-renderización porque la pantalla realmente necesita actualizarse. En ese caso, puede mejorar el rendimiento separando las actualizaciones de bloqueo que deben ser sincrónicas (como escribir en una entrada) de las actualizaciones no bloqueantes que no necesitan bloquear la interfaz de usuario (como actualizar un gráfico).

Para priorizar la representación, usa uno de estos ganchos:

--useTransition le permite marcar una transición de estado como no bloqueante y permitir que otras actualizaciones la interrumpan.

--useDeferredValue le permite aplazar la actualización de una parte no crítica de la interfaz de usuario y dejar que otras partes se actualicen primero.

Otros ganchos
Estos ganchos son útiles principalmente para los autores de bibliotecas y no se usan comúnmente en el código de la aplicación.

--useDebugValue le permite personalizar la etiqueta que React DevTools muestra para su Hook personalizado.

--useId permite que un componente asocie un ID único consigo mismo. Normalmente se usa con API de accesibilidad.

--useSyncExternalStore permite que un componente se suscriba a un almacén externo.