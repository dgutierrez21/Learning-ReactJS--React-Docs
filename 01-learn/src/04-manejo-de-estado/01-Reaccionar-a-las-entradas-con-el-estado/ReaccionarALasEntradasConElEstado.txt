Reaccionar a la entrada con el estado
React utiliza una forma declarativa para manipular la interfaz de usuario. En lugar de manipular partes individuales de la interfaz de usuario directamente, describa los diferentes estados en los que puede estar el componente y cambie entre ellos en respuesta a la entrada del usuario. Esto es similar a cómo piensan los diseñadores sobre la interfaz de usuario.

Aprenderás
En qué se diferencia la programación declarativa de la interfaz de usuario de la programación imperativa de interfaz de usuario
Cómo enumerar los diferentes estados visuales en los que puede estar el componente
Cómo desencadenar los cambios entre los diferentes estados visuales del código

Cómo se compara la interfaz de usuario declarativa con la imperativa
Al diseñar interacciones de interfaz de usuario, probablemente piense en cómo cambia la interfaz de usuario en respuesta a las acciones del usuario. Considere un formulario que permita al usuario enviar una respuesta:

--- Cuando escribe algo en un formulario, el botón "Enviar" se habilita.
--- Cuando presiona "Enviar", tanto el formulario como el botón se deshabilitan, y aparece un girador.
---Si la solicitud de red se realiza correctamente, el formulario se oculta y aparece el mensaje "Gracias".
---Si se produce un error en la solicitud de red, aparece un mensaje de error y el formulario vuelve a habilitarse.

En la programación imperativa, lo anterior corresponde directamente a cómo implementa la interacción. Debe escribir las instrucciones exactas para manipular la interfaz de usuario según lo que acaba de suceder. Aquí hay otra forma de pensar en esto: imagina viajar al lado de alguien en un automóvil y decirle giro a giro a dónde ir.

No saben a dónde quieres ir, solo siguen tus órdenes. (¡Y si te equivocas en las instrucciones, terminas en el lugar equivocado!) Se llama imperativo porque tiene que "comandar" cada elemento, desde el girador hasta el botón, diciéndole a la computadora cómo actualizar la interfaz de usuario.

En este ejemplo de programación de interfaz de usuario imperativa, el formulario se crea sin React. Utiliza el navegador incorporado DOM:

https://codesandbox.io/s/kpgmzv?file=%2Findex.js&utm_medium=sandpack

La manipulación de la interfaz de usuario funciona imperativamente lo suficientemente bien para ejemplos aislados, pero se vuelve exponencialmente más difícil de administrar en sistemas más complejos. Imagina actualizar una página llena de diferentes formularios como esta. Agregar un nuevo elemento de la interfaz de usuario o una nueva interacción requeriría revisar cuidadosamente todo el código existente para asegurarse de que no ha introducido un error (por ejemplo, olvidarse de mostrar u ocultar algo).

React fue construido para resolver este problema.

En React, no manipula directamente la interfaz de usuario, lo que significa que no habilita, deshabilita, muestra u oculta componentes directamente. En su lugar, declara lo que desea mostrar y React descubre cómo actualizar la interfaz de usuario. Piense en subir a un taxi y decirle al conductor a dónde quiere ir en lugar de decirle exactamente a dónde girar. Es el trabajo del conductor llevarte allí, ¡e incluso podrían conocer algunos atajos que no has considerado!

Pensar en la interfaz de usuario de forma declarativa 
Has visto cómo implementar un formulario imperativamente arriba. Para comprender mejor cómo pensar en React, recorrerá la reimplementación de esta interfaz de usuario en React a continuación:

1. Identificar los diferentes estados visuales del componente
2. Determinar qué desencadena esos cambios de estado
3. Representar el estado en memoria mediante useState
4. Quitar cualquier variable de estado no esencial
5. Conecte los controladores de eventos para establecer el estado

Paso 1: Identificar los diferentes estados visuales del componente 
En ciencias de la computación, es posible que escuche que una "máquina de estados" está en uno de varios "estados". Si trabajas con un diseñador, es posible que hayas visto maquetas para diferentes "estados visuales". React se encuentra en la intersección del diseño y la informática, por lo que ambas ideas son fuentes de inspiración.

Primero, debe visualizar todos los diferentes "estados" de la interfaz de usuario que el usuario podría ver:

-Vacío: El formulario tiene un botón "Enviar" desactivado.
-Escritura: El formulario tiene habilitado el botón "Enviar".
-Envío: El formulario está completamente desactivado. Se muestra el girador.
-Correcto: se muestra el mensaje "Gracias" en lugar de un formulario.
-Error: Igual que el estado de escritura, pero con un mensaje de error adicional.

Al igual que un diseñador, querrá "maqueta" o crear "simulacros" para los diferentes estados antes de agregar lógica. Por ejemplo, aquí hay un simulacro solo para la parte visual del formulario. Este simulacro está controlado por un prop llamado status con un valor predeterminado de ''empty':

...

Podrías llamar a ese accesorio como quieras, el nombre no es importante. Intente editar status = 'empty' a status = 'empty' 'status = 'success' para ver aparecer el mensaje de éxito. La burla le permite iterar rápidamente en la interfaz de usuario antes de conectar cualquier lógica. Aquí hay un prototipo más desarrollado del mismo componente, todavía "controlado" por el status:

...

Paso 2: Determinar qué desencadena esos cambios de estado 
Puede desencadenar actualizaciones de estado en respuesta a dos tipos de entradas:

--Entradas humanas, como hacer clic en un botón, escribir en un campo, navegar por un enlace.
--Entradas de computadora, como una respuesta de red que llega, un tiempo de espera que se completa, una carga de imagen.

ver imagen...

En ambos casos, debe establecer variables de estado para actualizar la interfaz de usuario. Para el formulario que está desarrollando, deberá cambiar el estado en respuesta a algunas entradas diferentes:

--Cambiar la entrada de texto (humano) debe cambiarlo del estado Vacío al estado Escritura o atrás, dependiendo de si el cuadro de texto está vacío o no.
--Al hacer clic en el botón Enviar (humano) debería cambiarlo al estado Enviar.
--La respuesta de red correcta (equipo) debe cambiarla al estado Correcto.
--La respuesta de red fallida (equipo) debe cambiarla al estado Error con el mensaje de error correspondiente.

Tenga en cuenta que las entradas humanas a menudo requieren controladores de eventos!

Para ayudar a visualizar este flujo, intente dibujar cada estado en papel como un círculo etiquetado, y cada cambio entre dos estados como una flecha. Puede esbozar muchos flujos de esta manera y resolver errores mucho antes de la implementación.

ver imagen...

Paso 3: Representar el estado en memoria con useState
A continuación, deberá representar los estados visuales de su componente en memoria con useState. La simplicidad es clave: cada pieza de estado es una "pieza en movimiento", y desea la menor cantidad posible de "piezas móviles". ¡Más complejidad conduce a más errores!

Comience con el estado que absolutamente debe estar allí. Por ejemplo, deberá almacenar la answer para la entrada y el error (si existe) para almacenar el último error:

...

Luego, necesitará una variable de estado que represente cuál de los estados visuales descritos anteriormente desea mostrar. Por lo general, hay más de una forma de representar eso en la memoria, por lo que tendrás que experimentar con ello.


Si tiene dificultades para pensar en la mejor manera de inmediato, comience agregando suficiente estado para que definitivamente esté seguro de que todos los estados visuales posibles están cubiertos:

...

Es probable que su primera idea no sea la mejor, pero está bien: ¡el estado de refactorización es parte del proceso!