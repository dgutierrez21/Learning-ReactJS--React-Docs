Elección de la estructura del estado

Estructurar bien el estado puede marcar la diferencia entre un componente que es agradable de modificar y depurar, y uno que es una fuente constante de errores. Aquí hay algunos consejos que debe considerar al estructurar el estado.

Aprenderás
Cuándo usar una sola variable vs varias variables de estado
Qué evitar al organizar el estado
Cómo solucionar problemas comunes con la estructura del estado

Principios para estructurar el Estado 
Cuando escriba un componente que contenga algún estado, tendrá que tomar decisiones sobre cuántas variables de estado usar y cuál debe ser la forma de sus datos. Si bien es posible escribir programas correctos incluso con una estructura de estado subóptima, hay algunos principios que pueden guiarlo para tomar mejores decisiones:

1. Estado relacionado con el grupo. Si siempre actualiza dos o más variables de estado al mismo tiempo, considere la posibilidad de combinarlas en una sola variable de estado.

2. Evitar contradicciones en el estado. Cuando el estado está estructurado de una manera que varias partes del estado pueden contradecirse y "estar en desacuerdo" entre sí, dejas espacio para los errores. Trate de evitar esto.

3. Evite el estado redundante. Si puede calcular alguna información a partir de los accesorios del componente o de sus variables de estado existentes durante la representación, no debe poner esa información en el estado de ese componente.

4. Evite la duplicación en el estado. Cuando los mismos datos se duplican entre varias variables de estado, o dentro de objetos anidados, es difícil mantenerlos sincronizados. Reduzca la duplicación cuando pueda.

5. Evite el estado profundamente anidado. El estado profundamente jerárquico no es muy conveniente para actualizar. Cuando sea posible, prefiera estructurar el estado de una manera plana.

El objetivo detrás de estos principios es hacer que el estado sea fácil de actualizar sin introducir errores. La eliminación de datos redundantes y duplicados del estado ayuda a garantizar que todas sus piezas permanezcan sincronizadas. Esto es similar a cómo un ingeniero de base de datos podría querer "normalizar" la estructura de la base de datos para reducir la posibilidad de errores. Parafraseando a Albert Einstein, "Haz que tu estado sea lo más simple posible, pero no más simple".

Ahora veamos cómo se aplican estos principios en acción.

Estado relacionado con el grupo
A veces es posible que no esté seguro entre usar una o varias variables de estado.

¿Deberías hacer esto?

const [x, setX] = useState(0);
const [y, setY] = useState(0);

¿O esto?

const [position, setPosition] = useState({ x: 0, y: 0 });

Técnicamente, puede utilizar cualquiera de estos enfoques. Pero si algunas dos variables de estado siempre cambian juntas, podría ser una buena idea unificarlas en una sola variable de estado. Entonces no olvidarás mantenerlos siempre sincronizados, como en este ejemplo donde mover el cursor actualiza ambas coordenadas del punto rojo:

...

Otro caso en el que agrupará datos en un objeto o una matriz es cuando no sabe cuántas piezas diferentes de estado necesitará. Por ejemplo, es útil cuando tiene un formulario donde el usuario puede agregar campos personalizados.

Trampa
Si la variable de estado es un objeto, recuerde que no puede actualizar solo un campo sin copiar explícitamente los demás campos. Por ejemplo, no puede hacer setPosition({ x: 100 }) en el ejemplo anterior porque no tendría la propiedad y en absoluto. En cambio, si quisieras establecer x solo, harías setPosition({ ...position, x: 100 }) 100 }), o divídalas en dos variables de estado y haga setX(100).

Evitar contradicciones en el estado
Aquí hay un formulario de comentarios del hotel con las variables isSending e isSent:

...

Aunque este código funciona, deja la puerta abierta a estados "imposibles". Por ejemplo, si olvidas llamar a setEnviado y setSeEstaEnviando a la vez, puedes acabar en una situación en la que tanto seEstaEnviando como enviado sean verdaderos al mismo tiempo. Cuanto más complejo sea tu componente, más difícil será entender lo que ha ocurrido.

Dado que seEstaEnviando e enviado nunca deben ser verdaderos o falsos al mismo tiempo, es mejor reemplazarlos con una variable de estado que puede tomar uno de los tres estados válidos: 'escribiendo' (inicial), 'enviando' y 'enviado':

...

Aún puede declarar algunas constantes para facilitar la lectura

...

Pero no son variables de estado, por lo que no necesita preocuparse de que no estén sincronizadas entre sí.

Evitar el estado redundante
Si puede calcular alguna información a partir de los accesorios del componente o de sus variables de estado existentes durante la representación, no debe poner esa información en el estado de ese componente.

Por ejemplo, tome esta forma. Funciona, pero ¿puedes encontrar algún estado redundante en él?

...

Este formulario tiene tres variables de estado: firstName, lastName y fullName. Sin embargo, fullName es redundante. Siempre puede calcular fullName a partir de firstName y lastName durante el procesamiento, así que elimínelo del estado.

Así es como puedes hacerlo:

...

Aquí, fullName no es una variable de estado. En su lugar, se calcula durante el renderizado:

const fullName = firstName + ' ' + lastName;

Como resultado, los controladores de cambios no necesitan hacer nada especial para actualizarlo. Cuando llama a setFirstName o setLastName, desencadena una nueva representación y, a continuación, el siguiente fullName se calculará a partir de los datos nuevos.

No refleje los accesorios en el estado
Un ejemplo común de estado redundante es un código como este:

function Message({ messageColor }) {
  const [color, setColor] = useState(messageColor);

Aquí, se inicializa una variable de estado de color en el messageColor. El problema es que si el componente padre pasa un valor diferente de messageColor más tarde (por ejemplo, ''red'' en lugar de ''blue'), la variable de estado de color no se actualizará. El estado solo se inicializa durante el primer renderizado.

Esta es la razón por la que "reflejar" algún accesorio en una variable de estado puede llevar a confusión. En su lugar, usa el messageColor prop directamente en el código. Si desea darle un nombre más corto, use una constante:

function Message({ messageColor }) {
  const color = messageColor;

De esta manera, no se desincronizará con el accesorio pasado desde el componente principal.

"Duplicar" los accesorios en el estado solo tiene sentido cuando desea ignorar todas las actualizaciones para un accesorio específico. Por convención, comience el nombre de la propuesta con initial o default para aclarar que se omiten sus nuevos valores:

function Message({ initialColor }) {
  // The `color` state variable holds the *first* value of `initialColor`.
  // Further changes to the `initialColor` prop are ignored.
  const [color, setColor] = useState(initialColor);

Evite la duplicación en el estado
Este componente de lista de menú le permite elegir un solo refrigerio de viaje entre varios:

...

Actualmente, almacena el elemento seleccionado como un objeto en la variable selectedItem. Sin embargo, esto no es genial: el contenido de selectedItem es el mismo objeto que uno de los elementos dentro de la lista de items. Esto significa que la información sobre el elemento en sí se duplica en dos lugares.

¿Por qué es esto un problema? Hagamos que cada elemento sea editable:

...

Observe cómo si primero hace clic en "Elegir" en un elemento y luego lo edita, la entrada se actualiza, pero la etiqueta en la parte inferior no refleja las ediciones. Esto se debe a que tiene un estado duplicado y olvidó actualizar selectedItem.

Aunque también puede actualizar selectedItem, una solución más fácil es eliminar la duplicación. En este ejemplo, en lugar de un objeto selectedItem (que crea una duplicación con objetos dentro de items), mantenga el selectedId en estado y, a continuación, obtenga el selectedItem buscando items items un elemento con ese identificador:selectedItem

...

(Como alternativa, puede mantener el índice seleccionado en estado).

El estado solía duplicarse así:

--items = [{ id: 0, title: 'pretzels'}, ...]
s--electedItem = {id: 0, title: 'pretzels'}

Pero después del cambio es así:

--items = [{ id: 0, title: 'pretzels'}, ...]
--selectedId = 0

¡La duplicación se ha ido, y solo mantienes el estado esencial!

Ahora, si edita el elemento seleccionado, el siguiente mensaje se actualizará inmediatamente. Esto se debe a que setItems desencadena una rerepresentación y items.find(...) encontraría el elemento con el título actualizado. No es necesario mantener el elemento seleccionado en estado, porque solo el ID seleccionado es esencial. El resto podría calcularse durante el renderizado.

Evitar el estado profundamente anidado
Imagina un plan de viaje que consiste en planetas, continentes y países. Es posible que tenga la tentación de estructurar su estado mediante matrices y objetos anidados, como en este ejemplo:

...

Ahora digamos que desea agregar un botón para eliminar un lugar que ya ha visitado. ¿Cómo lo harías? La actualización del estado anidado implica hacer copias de los objetos hasta el final de la parte que cambió. Eliminar un lugar profundamente anidado implicaría copiar toda su cadena de lugares primarios. Tal código puede ser muy detallado.

Si el estado está demasiado anidado para actualizarse fácilmente, considere la posibilidad de hacerlo "plano". Aquí hay una forma de reestructurar estos datos. En lugar de una estructura en forma de árbol donde cada lugar tiene una matriz de sus lugares secundarios, puede hacer que cada lugar contenga una matriz de sus ID de lugar secundario.place A continuación, puede almacenar una asignación de cada ID de lugar al lugar correspondiente.

Esta reestructuración de datos puede recordarle que debe ver una tabla de base de datos:

...

Ahora que el estado es "plano" (también conocido como "normalizado"), la actualización de elementos anidados se vuelve más fácil.

Para eliminar un lugar ahora, solo necesita actualizar dos niveles de estado:

--La versión actualizada de su lugar primario debe excluir el ID eliminado de su matriz childIds.

--La versión actualizada del objeto raíz "tabla" debe incluir la versión actualizada del lugar primario.
Aquí hay un ejemplo de cómo podría hacerlo:

...

Puede anidar el estado tanto como desee, pero hacerlo "plano" puede resolver numerosos problemas. Hace que el estado sea más fácil de actualizar y ayuda a garantizar que no haya duplicación en diferentes partes de un objeto anidado.

A veces, también puede reducir el anidamiento de estado moviendo parte del estado anidado a los componentes secundarios. Esto funciona bien para el estado efímero de la interfaz de usuario que no necesita almacenarse, como si un elemento está desplazado.

Recapitulación
--Si dos variables de estado siempre se actualizan juntas, considere fusionarlas en una sola.

--Elija sus variables de estado cuidadosamente para evitar crear estados "imposibles".

--Estructure su estado de una manera que reduzca las posibilidades de que cometa un error al actualizarlo.

--Evite el estado redundante y duplicado para que no tenga que mantenerlo sincronizado.

--No pongas accesorios en estado a menos que desees evitar específicamente las actualizaciones.

--Para patrones de interfaz de usuario como la selección, mantenga el ID o el índice en estado en lugar del objeto en sí.

--Si la actualización del estado profundamente anidado es complicada, intente acoplarlo.