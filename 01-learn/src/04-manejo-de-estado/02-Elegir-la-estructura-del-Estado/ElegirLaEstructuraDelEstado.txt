Elección de la estructura del estado

Estructurar bien el estado puede marcar la diferencia entre un componente que es agradable de modificar y depurar, y uno que es una fuente constante de errores. Aquí hay algunos consejos que debe considerar al estructurar el estado.

Aprenderás
Cuándo usar una sola variable vs varias variables de estado
Qué evitar al organizar el estado
Cómo solucionar problemas comunes con la estructura del estado

Principios para estructurar el Estado 
Cuando escriba un componente que contenga algún estado, tendrá que tomar decisiones sobre cuántas variables de estado usar y cuál debe ser la forma de sus datos. Si bien es posible escribir programas correctos incluso con una estructura de estado subóptima, hay algunos principios que pueden guiarlo para tomar mejores decisiones:

1. Estado relacionado con el grupo. Si siempre actualiza dos o más variables de estado al mismo tiempo, considere la posibilidad de combinarlas en una sola variable de estado.

2. Evitar contradicciones en el estado. Cuando el estado está estructurado de una manera que varias partes del estado pueden contradecirse y "estar en desacuerdo" entre sí, dejas espacio para los errores. Trate de evitar esto.

3. Evite el estado redundante. Si puede calcular alguna información a partir de los accesorios del componente o de sus variables de estado existentes durante la representación, no debe poner esa información en el estado de ese componente.

4. Evite la duplicación en el estado. Cuando los mismos datos se duplican entre varias variables de estado, o dentro de objetos anidados, es difícil mantenerlos sincronizados. Reduzca la duplicación cuando pueda.

5. Evite el estado profundamente anidado. El estado profundamente jerárquico no es muy conveniente para actualizar. Cuando sea posible, prefiera estructurar el estado de una manera plana.

El objetivo detrás de estos principios es hacer que el estado sea fácil de actualizar sin introducir errores. La eliminación de datos redundantes y duplicados del estado ayuda a garantizar que todas sus piezas permanezcan sincronizadas. Esto es similar a cómo un ingeniero de base de datos podría querer "normalizar" la estructura de la base de datos para reducir la posibilidad de errores. Parafraseando a Albert Einstein, "Haz que tu estado sea lo más simple posible, pero no más simple".

Ahora veamos cómo se aplican estos principios en acción.

Estado relacionado con el grupo
A veces es posible que no esté seguro entre usar una o varias variables de estado.

¿Deberías hacer esto?

const [x, setX] = useState(0);
const [y, setY] = useState(0);

¿O esto?

const [position, setPosition] = useState({ x: 0, y: 0 });

Técnicamente, puede utilizar cualquiera de estos enfoques. Pero si algunas dos variables de estado siempre cambian juntas, podría ser una buena idea unificarlas en una sola variable de estado. Entonces no olvidarás mantenerlos siempre sincronizados, como en este ejemplo donde mover el cursor actualiza ambas coordenadas del punto rojo:

...

Otro caso en el que agrupará datos en un objeto o una matriz es cuando no sabe cuántas piezas diferentes de estado necesitará. Por ejemplo, es útil cuando tiene un formulario donde el usuario puede agregar campos personalizados.

Trampa
Si la variable de estado es un objeto, recuerde que no puede actualizar solo un campo sin copiar explícitamente los demás campos. Por ejemplo, no puede hacer setPosition({ x: 100 }) en el ejemplo anterior porque no tendría la propiedad y en absoluto. En cambio, si quisieras establecer x solo, harías setPosition({ ...position, x: 100 }) 100 }), o divídalas en dos variables de estado y haga setX(100).