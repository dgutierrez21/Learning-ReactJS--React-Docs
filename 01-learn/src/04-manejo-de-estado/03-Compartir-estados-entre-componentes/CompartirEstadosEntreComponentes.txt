Estado compartido entre componentes
A veces, desea que el estado de dos componentes siempre cambie juntos. Para hacerlo, elimine el estado de ambos, muévalo a su padre común más cercano y luego páselo a ellos a través de accesorios. Esto se conoce como estado de elevación, y es una de las cosas más comunes que harás escribiendo código React.

Aprenderás
Cómo compartir el estado entre componentes levantándolo
Qué son los componentes controlados y no controlados

Levantar el estado con el ejemplo
En este ejemplo, un componente de Accordion padre representa dos Panelseparados:

Accordion
 Panel
 Panel

Cada componente Panel tiene un estado booleano isActive que determina si su contenido es visible.

Pulse el botón Mostrar para ambos paneles:

...

Observe cómo presionar el botón de un panel no afecta al otro panel: son independientes.

ver imagen...

Pero ahora digamos que desea cambiarlo para que solo se expanda un panel en un momento dado. Con ese diseño, expandir el segundo panel debería colapsar el primero. ¿Cómo lo harías?

Para coordinar estos dos paneles, debe "elevar su estado" a un componente padre en tres pasos:

1. Quite el estado de los componentes secundarios.
2. Pasar datos codificados de forma rígida del padre común.
3. Agregue el estado al elemento primario común y páselo junto con los controladores de eventos.

Esto permitirá que el componente Accordion coordine ambos Panely sólo se expanda uno a la vez.

Paso 1: Quitar el estado de los componentes secundarios

Dará el control de isActive del Panel a su componente padre. Esto significa que el componente padre pasará isActive a Panel como un accesorio en su lugar. Comience eliminando esta línea del componente Panel:

...

Y en su lugar, agregue isActive a la lista de accesorios del Panel:

...

Ahora el componente principal del Panel puede controlar isActive pasándolo como un accesorio. Por el contrario, el componente Panel ahora no tiene control sobre el valor de isActive, ¡ahora depende del componente principal!

Paso 2: Pasar datos codificados de forma rígida desde el padre común 
Para levantar el estado, debe ubicar el componente primario común más cercano de los dos componentes secundarios que desea coordinar:

Accordion (padre común más cercano)
    Panel
    Panel

En este ejemplo, es el componente Accordion. Dado que está por encima de ambos paneles y puede controlar sus accesorios, se convertirá en la "fuente de verdad" para la cual el panel está actualmente activo. Haga que el componente Accordion pase un valor codificado de forma rígida de isActive (por ejemplo, true) a ambos paneles:

...

Intente editar los valores isActive codificados en el componente Accordion y vea el resultado en la pantalla.

Paso 3: Agregar estado al padre común
Levantar el estado a menudo cambia la naturaleza de lo que está almacenando como estado.

En este caso, solo un panel debe estar activo a la vez. Esto significa que el componente padre común del Accordion necesita hacer un seguimiento de qué panel es el activo. En lugar de un valor boolean, podría usar un número como índice del Panel activo para la variable de estado:

Cuando activeIndex es 0, el primer panel está activo, y cuando es 1, es el segundo.

Al hacer clic en el botón "Mostrar" en cualquiera de los Panel, es necesario cambiar el índice activo en Accordion. Un Panel no puede establecer el estado activeIndex directamente porque está definido dentro del Accordion. El componente Accordion debe permitir explícitamente que el componente Panel cambie su estado pasando un controlador de eventos como accesorio:

...

El <button> dentro del Panel ahora usará el accesorio onShow como su controlador de eventos de clic:

...

¡Esto completa el estado de elevación! Mover el estado al componente padre común le permitió coordinar los dos paneles. El uso del índice activo en lugar de dos indicadores "se muestra" garantizaba que solo un panel estuviera activo en un momento dado. Y pasar el controlador de eventos al hijo permitió que el niño cambiara el estado del padre.

ver imagen...

Componentes controlados y no controlados
Es común llamar a un componente con algún estado local "no controlado". Por ejemplo, el componente Panel original con una variable isActive no se controla porque su padre no puede influir en si el panel está activo o no.

Por el contrario, se podría decir que un componente está "controlado" cuando la información importante en él es impulsada por accesorios en lugar de su propio estado local. Esto permite que el componente padre especifique completamente su comportamiento. El componente final del Panel con el isActive es controlado por el componente Accordion.

Los componentes no controlados son más fáciles de usar dentro de sus padres porque requieren menos configuración. Pero son menos flexibles cuando quieres coordinarlos entre sí. Los componentes controlados son flexibles al máximo, pero requieren que los componentes principales los configuren completamente con accesorios.

En la práctica, "controlado" y "no controlado" no son términos técnicos estrictos: cada componente generalmente tiene una mezcla de estado local y accesorios. Sin embargo, esta es una forma útil de hablar sobre cómo se diseñan los componentes y qué capacidades ofrecen.

Al escribir un componente, considere qué información en él debe controlarse (a través de accesorios) y qué información debe ser no controlada (a través del estado). Pero siempre puedes cambiar de opinión y refactorizar más tarde.

Una única fuente de verdad para cada estado
En una aplicación React, muchos componentes tendrán su propio estado. Algunos estados pueden "vivir" cerca de los componentes de la hoja (componentes en la parte inferior del árbol) como entradas. Otro estado puede "vivir" más cerca de la parte superior de la aplicación. Por ejemplo, incluso las bibliotecas de enrutamiento del lado del cliente generalmente se implementan almacenando la ruta actual en el estado React y pasándola por accesorios.

Para cada pieza única de estado, elegirá el componente que "posee". Este principio también se conoce como tener una "única fuente de verdad". No significa que todo el estado viva en un solo lugar, sino que para cada pieza de estado, hay un componente específico que contiene esa información. En lugar de duplicar el estado compartido entre componentes, lo elevará a su padre compartido común y lo transmitirá a los hijos que lo necesiten.

Tu aplicación cambiará a medida que trabajes en ella. Es común que mueva el estado hacia abajo o hacia arriba mientras todavía está averiguando dónde "vive" cada parte del estado. ¡Todo esto es parte del proceso!

Para ver cómo se siente esto en la práctica con algunos componentes más, "lea Pensar en reaccionar" shorturl.at/hQSZ1

Recapitulación
--Cuando desee coordinar dos componentes, mueva su estado a su padre común.

--Luego pase la información a través de accesorios de su padre común.

--Finalmente, pase los controladores de eventos hacia abajo para que los hijos puedan cambiar el estado del padre.

--Es útil considerar los componentes como "controlados" (impulsados por accesorios) o "no controlados" (impulsados por el estado).