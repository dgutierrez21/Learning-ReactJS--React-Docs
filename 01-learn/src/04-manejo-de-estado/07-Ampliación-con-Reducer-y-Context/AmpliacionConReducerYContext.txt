Ampliación con reductor y contexto
Los reductores permiten consolidar la lógica de actualización de estado de un componente. El contexto le permite pasar información a otros componentes. Puede combinar reductores y contexto para administrar el estado de una pantalla compleja.

Aprenderás
Cómo combinar un reductor con contexto
Cómo evitar pasar el estado y el despacho a través de accesorios
Cómo mantener el contexto y la lógica de estado en un archivo independiente

Combinar un reducer con el contexto
En este ejemplo de Introducción a reducers, el estado es gestionado por un reducer. La función reducer contiene toda la lógica de actualización del estado y se declara al final de este archivo:

...

Un reducer ayuda a mantener los manejadores de eventos cortos y concisos. Sin embargo, a medida que tu aplicación crece, puedes encontrarte con otra dificultad. Actualmente, el estado tasks y la función dispatch sólo están disponibles en el componente de nivel superior TaskApp. Para permitir que otros componentes lean la lista de tareas o la modifiquen, tienes que pasar explícitamente el estado actual y los manejadores de eventos que lo cambian como props.

Por ejemplo, TaskApp pasa una lista de tareas y los manejadores de eventos a TaskList:

...

  <ListaTareas
        tareas={tareas}
        onCambiarTarea={handleCambiarTarea}
        onEliminarTarea={handleEliminarTarea}
      />

Y TaskList pasa los manejadores de eventos a Task:

            <Tarea
              tarea={tarea}
              onCambiar={onCambiarTarea}
              onEliminar={onEliminarTarea}
            />

En un ejemplo pequeño como éste, funciona bien, pero si tienes decenas o cientos de componentes en el medio, ¡pasar todo el estado y las funciones puede ser bastante frustrante!

Por eso, como alternativa a pasarlas por props, podrías poner tanto el estado tasks como la función dispatch en el contexto. De esta manera, cualquier componente por debajo de TaskApp en el árbol puede leer las tareas y enviar acciones sin la “perforación de props” (o “prop drilling”).

A continuación se explica cómo se puede combinar un reducer con el contexto:

1. Crea el contexto.
2. Pon el estado y la función dispatch en el contexto.
3. Usa el contexto en cualquier parte del árbol.

Paso 1: Crea el contexto
El hook useReducer devuelve las tareas actuales y la función dispatch que permite actualizarlas:

  const [tareas, dispatch] = useReducer(reducerTareas, tareasIniciales);

Para pasarlos por el árbol, crearás dos contextos distintos:

    ---TasksContext proporciona la lista actual de tareas.

    ---TasksDispatchContext proporciona la función que permite a los componentes enviar acciones.

Expórtalos desde un archivo separado para poder importarlos posteriormente desde otros archivos:

...

Aquí, estás pasando null como valor por defecto a ambos contextos. Los valores reales serán proporcionados por el componente TaskApp.

Paso 2: Poner en contexto el estado y dispatch
Ahora puedes importar ambos contextos en tu componente TaskApp. Toma tasks y dispatch que devuelve useReducer() y proporciónalos a todo el árbol de abajo::

...

Por ahora, se pasa la información tanto vía props como en contexto.

En el siguiente paso, se eliminará el paso de props.

Paso 3: Utiliza el contexto en cualquier parte del árbol
Ahora no es necesario pasar la lista de tareas o los manejadores de eventos por el árbol:

...

En cambio, cualquier componente que necesite la lista de tareas puede leerla del TaskContext:

...

Para actualizar la lista de tareas, cualquier componente puede leer la función dispatch del contexto y llamarla:

...

El componente TaskApp no pasa ningún manejador de eventos hacia abajo, y TaskList tampoco pasa ningún manejador de eventos al componente Task. Cada componente lee el contexto que necesita:

...

El estado todavía “vive” en el componente de nivel superior TaskApp, gestionado con useReducer. Pero sus tareas (tasks) y dispatch están ahora disponibles para todos los componentes por debajo en el árbol mediante la importación y el uso de estos contextos.

Trasladar todo la lógica a un único archivo
No es necesario que lo hagas, pero podrías simplificar aún más los componentes moviendo tanto el reducer como el contexto a un solo archivo. Actualmente, TasksContext.js contiene solo dos declaraciones de contexto.

¡Este archivo está a punto de complicarse! Moverás el reducer a ese mismo archivo. A continuación, declararás un nuevo componente TasksProvider en el mismo archivo. Este componente unirá todas las piezas:

1. Gestionará el estado con un reducer.
2. Proporcionará ambos contextos a los componentes de abajo.
3. Tomará children como prop para que puedas pasarle JSX.

...

Esto elimina toda la complejidad y la lógica del componente TaskApp.

También puedes exportar funciones que utilicen el contexto desde TasksContext.js:

...

Cuando un componente necesita leer el contexto, puede hacerlo a través de estas funciones:

...

Esto no cambia el comportamiento de ninguna manera, pero te permite dividir más tarde estos contextos o añadir algo de lógica a estas funciones. Ahora todo la lógica del contexto y del reducer está en TasksContext.js. Esto mantiene los componentes limpios y despejados, centrados en lo que muestran en lugar de donde obtienen los datos.

Puedes pensar en TasksProvider como una parte de la pantalla que sabe cómo tratar con las tareas, useTasks como una forma de leerlas, y useTasksDispatch como una forma de actualizarlas desde cualquier componente de abajo en el árbol.

Funciones como useTasks y useTasksDispatch se llaman Hooks personalizados (Custom Hooks). Tu función se considera un Hook personalizado si su nombre empieza por use. Esto te permite usar otros Hooks, como useContext, dentro de ella.

A medida que tu aplicación crece, puedes tener muchos pares contexto-reducer como este. Esta es una poderosa forma de escalar tu aplicación y manejar el estado sin demasiado trabajo cada vez que se quiera acceder a los datos en la profundidad del árbol.