Pasar datos profundamente con contexto
Por lo general, pasará información de un componente padre a un componente secundario a través de accesorios. Pero pasar accesorios puede volverse detallado e inconveniente si tienes que pasarlos a través de muchos componentes en el medio, o si muchos componentes de tu aplicación necesitan la misma información. El contexto permite que el componente padre ponga cierta información a disposición de cualquier componente del árbol debajo de él, sin importar cuán profundo sea, sin pasarla explícitamente a través de accesorios.

Aprenderás
Qué es la "perforación de apoyo"
Cómo reemplazar el paso repetitivo de accesorios con contexto
Casos de uso comunes para el contexto
Alternativas comunes al contexto

El problema de pasar props
Pasar accesorios es una excelente manera de canalizar explícitamente datos a través del árbol de la interfaz de usuario a los componentes que lo usan.

Pero pasar accesorios puede volverse detallado e inconveniente cuando necesita pasar algunos accesorios profundamente a través del árbol, o si muchos componentes necesitan el mismo accesorio. El ancestro común más cercano podría estar muy alejado de los componentes que necesitan datos, y elevar el estado tan alto puede conducir a una situación a veces llamada "perforación de apoyo".

ver imagen...

¿No sería genial si hubiera una manera de "teletransportar" datos a los componentes del árbol que los necesitan sin pasar accesorios? Con la función de contexto de React, ¡hay!

Context: una alternativa a los accesorios de paso
El contexto permite que un componente padre proporcione datos a todo el árbol debajo de él. Hay muchos usos para el contexto. He aquí un ejemplo. Considere este componente Heading que acepta un level para su tamaño:

...

Supongamos que desea que varios encabezados dentro de la misma Section tengan siempre el mismo tamaño:

...

Actualmente, pasas el accesorio level a cada <Heading> por separado:

<Section>
  <Heading level={3}>About</Heading>
  <Heading level={3}>Photos</Heading>
  <Heading level={3}>Videos</Heading>
</Section>

Sería bueno si pudieras pasar el accesorio de level al componente <Section>> en su lugar y eliminarlo del <Heading>. De esta manera, podría exigir que todos los encabezados de la misma sección tengan el mismo tamaño:

<Section level={3}>
  <Heading>About</Heading>
  <Heading>Photos</Heading>
  <Heading>Videos</Heading>
</Section>

Pero, ¿cómo puede el componente <Heading>> conocer el nivel de su <Section> más cercano? Eso requeriría alguna forma para que un niño "pida" datos de algún lugar arriba en el árbol.

No puedes hacerlo solo con accesorios. Aquí es donde entra en juego el contexto. Lo harás en tres pasos:

1. Crear un contexto. (Puede llamarlo LevelContext, ya que es para el nivel de encabezado).

2. Utilice ese contexto del componente que necesita los datos. (Heading usará LevelContext.)

3. Proporcione ese contexto desde el componente que especifica los datos. (Section proporcionará LevelContext.)

El contexto permite que un padre, ¡incluso uno distante!, proporcione algunos datos a todo el árbol dentro de él.

ver imagen...

Paso 1: Crear el contexto
Primero, necesitas crear el contexto. Deberá exportarlo desde un archivo para que sus componentes puedan usarlo:

...

El único argumento para createContext es el valor predeterminado. Aquí, 1 se refiere al nivel de encabezado más grande, pero puede pasar cualquier tipo de valor (incluso un objeto). Verá la importancia del valor predeterminado en el siguiente paso.

Paso 2: Usa el contexto 
Importa el useContext desde React y tu contexto:

...

Actualmente, el componente Heading lee el level de los accesorios:

...

En su lugar, quite el accesorio de level y lea el valor del contexto que acaba de importar, LevelContext:

...

useContext es un gancho. Al igual que useState y useReducer, solo puede llamar a un Hook en el nivel superior de un componente React. useContext indica a React que el componente Heading desea leer LevelContext.

Ahora que el componente Encabezado no tiene un accesorio de nivel, ya no es necesario pasar el puntal de level a Heading en Heading su JSX

Ahora que el componente Encabezado no tiene un accesorio de nivel, ya no es necesario pasar el puntal de level a Heading en Heading su JSX de esta manera:

Actualice el JSX para que sea la Section la que lo reciba en su lugar.

...

¡Observe que este ejemplo aún no funciona! Todos los encabezados tienen el mismo tamaño porque, aunque esté utilizando el contexto, aún no lo ha proporcionado. ¡React no sabe dónde conseguirlo!

Si no proporciona el contexto, React utilizará el valor predeterminado que especificó en el paso anterior. En este ejemplo, especificó 1 como argumento para createContext, por lo que useContext(LevelContext) devuelve 1, estableciendo todos 1esos encabezados en <h1>. Solucionemos este problema haciendo que cada Section proporcione su propio contexto.

Paso 3: Proporcionar el contexto
El componente Section actualmente representa sus elementos secundarios.

Envuélvalos con un proveedor de contexto para proporcionarles LevelContext:

...

Esto le dice a React: "si algún componente dentro <Section> solicita LevelContext, dales este level". El componente usará el valor del <LevelContext.Provider> más cercano en el árbol de la interfaz de usuario que se encuentra encima.

Es el mismo resultado que el código original, ¡pero no fue necesario pasar el accesorio de level a cada componente Heading! En cambio, "calcula" su nivel de encabezado preguntando a la Section más cercana anterior:

1. Pasas un accesorio level a la <Section>.
2. Section ajusta sus elementos secundarios en <LevelContext.Provider value={level}>.
3. Heading pregunta el valor más cercano de LevelContext anterior con useContext(LevelContext) LevelContext.

Usar y proporcionar contexto desde el mismo componente
Actualmente, todavía tiene que especificar el level de cada sección manualmente:

export default function Page() {
  return (
    <Section level={1}>
      ...
      <Section level={2}>
        ...
        <Section level={3}>
          ...

Dado que el contexto le permite leer información de un componente Section anterior, cada sección podría leer el nivel de la Section anterior y pasar el level + 1 hacia abajo automáticamente. Así es como podrías hacerlo:

...

Con este cambio, no es necesario pasar el level ni a la <<Section>> ni al <Heading>:

...

Ahora, tanto el Heading como la Section leen el LevelContext para descubrir qué tan "profundos" son. Y la Section envuelve sus hijos en LevelContext para especificar que cualquier cosa dentro de ella está en un nivel "más profundo".

En este ejemplo se usan niveles de encabezado porque muestran visualmente cómo los componentes anidados pueden invalidar el contexto. Pero el contexto también es útil para muchos otros casos de uso. Puede usarlo para transmitir cualquier información que necesite todo el subárbol: el tema de color actual, el usuario que ha iniciado sesión actualmente, etc.

El contexto pasa a través de componentes intermedios
Puede insertar tantos componentes como desee entre el componente que proporciona contexto y el que lo utiliza. Esto incluye tanto componentes integrados como <div> como componentes que puede construir usted mismo.

En este ejemplo, el mismo componente Post (con un borde discontinuo) se representa en dos niveles de anidamiento diferentes. Observe que el <<Heading>> dentro de él obtiene su nivel automáticamente de la <Section>:

https://codesandbox.io/s/8t0nb9?file=/Section.js&utm_medium=sandpack

No hiciste nada especial para que esto funcionara. Una Section especifica el contexto para el árbol dentro de ella, por lo que puede insertar un <Heading> en cualquier lugar, y tendrá el tamaño correcto. ¡Pruébalo en la caja de arena de arriba!

El contexto le permite escribir componentes que "se adaptan a su entorno" y se muestran de manera diferente dependiendo de dónde (o, en otras palabras, en qué contexto) se están representando.

El funcionamiento del contexto puede recordarle a la herencia de propiedades CSS. En CSS, puede especificar color: azul para un <div>, y cualquier nodo DOM dentro de él, sin importar cuán profundo sea, heredará ese color a menos que algún otro nodo DOM en el medio lo anule con color: green.color: blue Del mismo modo, en React, la única forma de anular algún contexto que viene de arriba es envolver a los niños en un proveedor de contexto con un valor diferente.

En CSS, diferentes propiedades como color color y el background-color no se anulan entre sí. Puede establecer todo el color de <div> en rojo sin afectar el background-color.color Del mismo modo, los diferentes contextos de React no se anulan entre sí. Cada contexto que crea con createContext() está completamente separado de los demás y vincula componentes que usan y proporcionan ese contexto en particular. Un componente puede usar o proporcionar muchos contextos diferentes sin ningún problema.

Antes de usar el contexto
¡El contexto es muy tentador de usar! Sin embargo, esto también significa que es demasiado fácil abusar de él. El hecho de que necesites pasar algunos accesorios a varios niveles de profundidad no significa que debas poner esa información en contexto.

Aquí hay algunas alternativas que debe considerar antes de usar el contexto:

1. Comience por pasar accesorios. Si sus componentes no son triviales, no es inusual pasar una docena de accesorios a través de una docena de componentes. Puede parecer un trabajo pesado, ¡pero deja muy claro qué componentes usan qué datos! La persona que mantiene su código se alegrará de que haya hecho explícito el flujo de datos con accesorios.

2. Extraiga componentes y páseles JSX como children. Si pasa algunos datos a través de muchas capas de componentes intermedios que no usan esos datos (y solo los pasa más abajo), esto a menudo significa que olvidó extraer algunos componentes en el camino. Por ejemplo, tal vez pases accesorios de datos como posts a componentes visuales que no los usan directamente, como <Layout posts={posts} />. En su lugarLayout, haz que Layout tome children como accesorio y renderice <Layout><<Layout><Posts posts={posts} /></Layout>. Esto reduce el número de capas entre el componente que especifica los datos y el que los necesita.

Si ninguno de estos enfoques funciona bien para usted, considere el contexto.