Extracción de lógica de estado en un reductor
Los componentes con muchas actualizaciones de estado distribuidas en muchos controladores de eventos pueden ser abrumadores. Para estos casos, puede consolidar toda la lógica de actualización de estado fuera del componente en una sola función, denominada reductor.

Aprenderás
Qué es una función reductora
Cómo refactorizar useState to useReducer
Cuándo usar un reductor
Cómo escribir un pozo

Consolidar la lógica de estado con un reductor
A medida que sus componentes crecen en complejidad, puede ser más difícil ver de un vistazo todas las diferentes formas en que se actualiza el estado de un componente. Por ejemplo, el componente TaskApp siguiente contiene una matriz de tareas en estado y utiliza tres controladores de eventos diferentes para agregar, quitar y editar tasks:

...

Cada uno de sus controladores de eventos llama a setTasks para actualizar el estado. A medida que este componente crece, también lo hace la cantidad de lógica de estado salpicada a lo largo de él. Para reducir esta complejidad y mantener toda su lógica en un lugar de fácil acceso, puede mover esa lógica de estado a una sola función fuera de su componente, llamada "reductor".

Los reductores son una forma diferente de manejar el estado. Puede migrar de useState a useReducer en tres pasos:

1. Pasar de establecer el estado a distribuir acciones.
2. Escribe una función reductora.
3. Utilice el reductor de su componente.

Paso 1: Pasar de establecer el estado a distribuir acciones
Los controladores de eventos especifican actualmente qué hacer estableciendo el estado.

Quite toda la lógica de configuración de estado. Lo que le queda son tres controladores de eventos:

handleAddTask(text) se llama cuando el usuario presiona "Add".

handleChangeTask(task) se llama cuando el usuario alterna una tarea o presiona "Guardar".

handleDeleteTask(taskId) se llama cuando el usuario presiona "Eliminar".

La gestión del estado con reductores es ligeramente diferente de la configuración directa del estado. En lugar de decirle a React "qué hacer" estableciendo el estado, especifique "lo que acaba de hacer el usuario" enviando "acciones" desde sus controladores de eventos. (¡La lógica de actualización del estado vivirá en otro lugar!) Entonces, en lugar de "establecer tasks" a través de un controlador de eventos, está enviando una acción de "agregada / cambiada / eliminada una tarea". Esto es más descriptivo de la intención del usuario.

...

El objeto que se pasa a dispatch se denomina "acción".

Es un objeto JavaScript normal. Usted decide qué poner en él, pero generalmente debe contener la información mínima sobre lo que sucedió. (Agregará la función de dispatch en un paso posterior).

Nota
Un objeto de acción puede tener cualquier forma.

Por convención, es común darle un type de cadena que describa lo que sucedió y pasar cualquier información adicional en otros campos. El type es específico de un componente, por lo que en este ejemplo 'agregado' o ''added' estaría bien.'added_task' ¡Elige un nombre que diga lo que pasó!

dispatch({
  // specific to component
  type: 'what_happened',
  // other fields go here
});

Paso 2: Escribir una función reductora
Una función reductora es donde pondrás tu lógica de estado. Toma dos argumentos, el estado actual y el objeto action, y devuelve el siguiente estado:

React establecerá el estado a lo que devuelves del reductor.

Para mover la lógica de configuración de estado de los controladores de eventos a una función reductora en este ejemplo, deberá:

1. Declare el estado actual (tasks) como primer argumento.
2. Declare el objeto action como segundo argumento.
3. Devuelve el siguiente estado del reductor (en el que React establecerá el estado).

Aquí está toda la lógica de configuración de estado migrada a una función reductora:

...

Dado que la función reductora toma el estado (tasks) como argumento, puede declararlo fuera del componente. Esto disminuye el nivel de sangría y puede facilitar la lectura del código.

Nota
El código anterior usa instrucciones if/else, pero es una convención usar instrucciones switch dentro de reductores. El resultado es el mismo, pero puede ser más fácil leer las instrucciones switch de un vistazo.

Los usaremos en el resto de esta documentación de la siguiente manera:

...

Recomendamos envolver cada bloque de case en las llaves { y } para que las variables declaradas dentro de diferentes caseno entren en conflicto entre sí. Además, un case generalmente debe terminar con una return. Si olvida return, el código "caerá" al siguiente case, ¡lo que puede llevar a errores!

Si aún no se siente cómodo con las instrucciones switch, usar if/else está completamente bien.

Paso 3: Usa el reductor de tu componente
Finalmente, debe conectar tasksReducer a su componente. Asegúrese de importar el useReducer desde React:

...

Entonces puede reemplazar useState

...

El gancho useReducer es similar a useState: debe pasarle un estado inicial y devuelve un valor con estado y una forma de establecer el estado (en este caso, la función de envío). Pero es un poco diferente.

El useReducer toma dos argumentos:

1. Una función reductora
2. Un estado inicial

Y devuelve:

1. Un valor con estado
2. Una función de despacho (para "enviar" acciones del usuario al reductor)

¡Ahora está completamente conectado! Aquí, el reductor se declara en la parte inferior del archivo componente.

La lógica de los componentes puede ser más fácil de leer cuando se separan preocupaciones como esta. Ahora los controladores de eventos solo especifican lo que sucedió al distribuir acciones, y la función reductora determina cómo se actualiza el estado en respuesta a ellas.

Comparación de useState y useReducer
¡Los reductores no están exentos de inconvenientes! Aquí hay algunas maneras de compararlos:

---Tamaño del código: Generalmente, con useState tienes que escribir menos código por adelantado. Con useReducer, debe escribir tanto una función reductora como acciones de envío. Sin embargo, useReducer puede ayudar a reducir el código si muchos controladores de eventos modifican el estado de manera similar.
Legibilidad: useState es muy fácil de leer cuando las actualizaciones de estado son simples. Cuando se vuelven más complejos, pueden inflar el código de su componente y dificultar el escaneo. En este caso, useReducer permite separar limpiamente el cómo de la lógica de actualización de lo que sucedió con los controladores de eventos.

---Depuración: Cuando tiene un error con useState, puede ser difícil saber dónde se configuró incorrectamente el estado y por qué. Con useReducer, puede agregar un registro de consola en su reductor para ver cada actualización de estado y por qué sucedió (debido a qué action). Si cada action es correcta, sabrás que el error está en la lógica del reductor en sí. Sin embargo, debe recorrer más código que con useState.

---Ensayo: Un reductor es una función pura que no depende de su componente. Esto significa que puede exportarlo y probarlo por separado de forma aislada. Aunque generalmente es mejor probar los componentes en un entorno más realista, para la lógica de actualización de estado compleja puede ser útil afirmar que el reductor devuelve un estado particular para un estado y una acción iniciales determinados.

---Preferencia personal: A algunas personas les gustan los reductores, a otras no. Está bien. Es una cuestión de preferencia. Siempre puede convertir entre useState y useReducer de un lado a otro: ¡son equivalentes!

Recomendamos usar un reductor si a menudo encuentra errores debido a actualizaciones de estado incorrectas en algún componente y desea introducir más estructura en su código. No tienes que usar reductores para todo: ¡siéntete libre de mezclar y combinar! Incluso puede useState y useReducer en el mismo componente.

Escribir bien los reductores
Tenga en cuenta estos dos consejos al escribir reductores:

---Los reductores deben ser puros. Similar a las funciones del actualizador de estado, los reductores se ejecutan durante el renderizado. (Las acciones se ponen en cola hasta la siguiente representación). Esto significa que los reductores deben ser puros: las mismas entradas siempre dan como resultado la misma salida. No deben enviar solicitudes, programar tiempos de espera ni realizar efectos secundarios (operaciones que afecten a cosas fuera del componente). Deben actualizar objetos y matrices sin mutaciones.

---Cada acción describe una única interacción del usuario, incluso si eso conduce a múltiples cambios en los datos. Por ejemplo, si un usuario presiona "Restablecer" en un formulario con cinco campos administrados por un reductor, tiene más sentido enviar una reset_form acción en lugar de cinco acciones set_field separadas. Si registra cada acción en un reductor, ese registro debe ser lo suficientemente claro como para reconstruir qué interacciones o respuestas ocurrieron en qué orden. ¡Esto ayuda con la depuración!