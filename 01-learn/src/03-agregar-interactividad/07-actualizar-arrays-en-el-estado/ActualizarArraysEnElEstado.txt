Actualizar arrays en el estado
Los arrays son mutables en JavaScript, pero deberían tratarse como inmutables cuando los almacenas en el estado. Al igual que los objetos, cuando quieras actualizar un array almacenado en el estado, necesitas crear uno nuevo (o hacer una copia de uno existente) y luego asignar el estado para que utilice este nuevo array.

Aprenderás
Cómo añadir, eliminar o cambiar elementos en un array en el estado de React
Cómo actualizar un objeto dentro de un array
Cómo copiar un array de forma menos repetitiva con Immer

Actualizar arrays sin mutación 
En JavaScript, los arrays son solo otro tipo de objeto. Como con los objetos, deberías tratar los arrays en el estado de React como si fueran de solo lectura. Esto significa que no deberías reasignar elementos dentro de un array como arr[0] = 'pájaro', y tampoco deberías usar métodos que puedan mutar el array, como push() y pop().

En su lugar, cada vez que quieras actualizar un array, querrás pasar un nuevo array a la función de asignación de estado. Para hacerlo, puedes crear un nuevo array a partir del array original en el estado si llamas a sus métodos que no lo muten como filter() y map(). Luego puedes asignar el estado a partir del nuevo array resultante.

Aquí hay una tabla de referencia con las operaciones más comunes con arrays. Cuando se trata de arrays dentro del estado de React, necesitarás evitar los métodos de la columna izquierda, y en su lugar es preferible usar los métodos de la columna derecha.

...


Como alternativa, puedes usar Immer el cual te permite usar métodos de ambas columnas.

Atención
Desafortunadamente, slice y splice tienen nombres muy similares pero son muy diferentes:

slice te permite copiar un array o una parte del mismo.
splice muta el array (para insertar o eliminar elementos).
En React, estarás usando slice (no p!) mucho más seguido porque no quieres mutar objetos o arrays en el estado. Actualizar objetos explica qué es mutación y por qué no se recomienda para el estado.

Añadir a un array 
push() muta un array, lo cual no queremos:

...

En su lugar, crea un nuevo array que contenga los elementos existentes y un nuevo elemento al final. Hay múltiples formas de hacerlo, pero la más fácil es usar la sintaxis ... de propagación en arrays:

...

Ahora funciona correctamente:

...

El operador de propagación también te permite anteponer un elemento al colocarlo antes del original ...artists:

...

De esta forma, el operador de propagación puede hacer el trabajo tanto de push() añadiendo al final del array como de unshift() agregando al comienzo del array. ¡Pruébalo en el editor de arriba!

Eliminar elementos de un array 
La forma más fácil de eliminar un elemento de un array es filtrarlo. En otras palabras, producirás un nuevo array que no contendrá ese elemento. Para hacerlo, usa el método filter, por ejemplo:

...

Haz click en el botón “Eliminar” varias veces, y mira su manejador de clics.

setArtists(
  artists.filter(a => a.id !== artist.id)
);

Aquí, artists.filter(a => a.id !== artist.id) significa “crea un nuevo array conformado por aquellos artists cuyos IDs son diferentes de artist.id”. En otras palabras, el botón “Eliminar” de cada artista filtrará a ese artista del array y luego solicitará un rerenderizado con el array resultante. Ten en cuenta que filter no modifica el array original.

Transformar un array
Si deseas cambiar algunos o todos los elementos del array, puedes usar map() para crear un nuevo array. La función que pasarás a map puede decidir qué hacer con cada elemento, en función de sus datos o su índice (o ambos).

En este ejemplo, un array contiene las coordenadas de dos círculos y un cuadrado. Cuando presionas el botón, mueve solo los círculos 50 píxeles hacia abajo. Lo hace produciendo un nuevo array de datos usando map(): 

...

Reemplazar elementos en un array 
Es particularmente común querer reemplazar uno o más elementos en un array. Las asignaciones como arr[0] = 'pájaro' están mutando el array original, por lo que para esto también querrás usar map.

Para reemplazar un elemento, crea una un nuevo array con map. Dentro de la llamada a map, recibirás el índice del elemento como segundo argumento. Úsalo para decidir si devolver el elemento original (el primer argumento) o algo más:

...

Insertar en un array 
A veces, es posible que desees insertar un elemento en una posición particular que no esté ni al principio ni al final. Para hacer esto, puedes usar la sintaxis de propagación para arrays ... junto con el método slice(). El método slice() te permite cortar una “rebanada” del array. Para insertar un elemento, crearás un array que extienda el segmento antes del punto de inserción, luego el nuevo elemento y luego el resto del array original.

En este ejemplo, el botón “Insertar” siempre inserta en el índice 1:

...

Hacer otros cambios en un array 
Hay algunas cosas que no puedes hacer con la sintaxis extendida y los métodos que no mutan como map() y filter(). Por ejemplo, es posible que desees invertir u ordenar un array. Los métodos JavaScript reverse() y sort() mutan el array original, por lo que no puedes usarlos directamente.

Sin embargo, puedes copiar el array primero y luego realizar cambios en él.

Por ejemplo:

...

Aquí, usas la sintaxis de propagación [...list] para crear primero una copia del array original. Ahora que tienes una copia, puedes usar métodos de mutación como nextList.reverse() o nextList.sort(), o incluso asignar elementos individuales con nextList[0] = "algo".

Sin embargo, incluso si copias un array, no puedes mutar los elementos existentes dentro de éste directamente. Esto se debe a que la copia es superficial: el nuevo array contendrá los mismos elementos que el original. Entonces, si modificas un objeto dentro del array copiado, estás mutando el estado existente. Por ejemplo, un código como este es un problema.

const nextList = [...list];
nextList[0].seen = true; // Problema: muta list[0]
setList(nextList);

Aunque nextList y list son dos arrays diferentes, nextList[0] y list[0] apuntan al mismo objeto. Entonces, al cambiar nextList[0].seen, está también cambiando list[0].seen. ¡Esta es una mutación de estado que debes evitar! Puedes resolver este problema de forma similar a actualizar objetos JavaScript anidados: copiando elementos individuales que deseas cambiar en lugar de mutarlos. Así es cómo.

