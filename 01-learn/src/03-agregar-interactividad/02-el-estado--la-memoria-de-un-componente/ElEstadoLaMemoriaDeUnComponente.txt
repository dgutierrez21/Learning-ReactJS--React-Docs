El Estado: La memoria un componente
Los componentes a menudo necesitan cambiar lo que se muestra en pantalla como resultado de una interacción. Escribir dentro de un formulario debería actualizar el campo de texto, hacer clic en “siguiente” en un carrusel de imágenes debería cambiar la imagen que es mostrada; hacer click en un botón para comprar un producto debería actualizar el carrito de compras. En los ejemplos anteriores los componentes deben “recordar” cosas: el campo de texto, la imagen actual, el carrito de compras. En React, a este tipo de memoria de los componentes se le conoce como estado.

Aprenderás
Cómo agregar una variable de estado con el Hook de useState
Qué par de valores devuelve el hook de useState
Cómo agregar más de una variable de estado
Por qué se le llama local al estado

Cuando una variable regular no es suficiente
Aquí hay un componente que renderiza una imagen de una escultura. Al hacer clic en el botón “Siguiente”, debería mostrarse la siguiente escultura cambiando el índice index a 1, luego a 2, y así sucesivamente. Sin embargo, esto no funcionará (¡puedes intentarlo!):

...

El controlador de eventos handleClick está actualizando una variable local, index. Pero dos cosas impiden que ese cambio sea visible:

1. Las variables locales no persisten entre renderizaciones. Cuando React renderiza este componente por segunda vez, lo hace desde cero, no considera ningún cambio en las variables locales.
2. Los cambios en las variables locales no activarán renderizaciones. React no se da cuenta de que necesita renderizar el componente nuevamente con los nuevos datos.

Para actualizar un componente con datos nuevos, deben pasar las siguientes dos cosas:

1. Conservar los datos entre renderizaciones.
2. Provocar que React renderice el componente con nuevos datos (re-renderizado).

El Hook de useState ofrece dos cosas:

1. Una variable de estado para mantener los datos entre renderizados.
2. Una función que setea el estado para actualizar la variable y provocar que React renderice el componente nuevamente.

Agregar una variable de estado 
Para agregar una variable de estado, debemos importar el useState de React al inicio del archivo:

import { useState } from 'react';
Luego, reemplazamos esta línea:

let index = 0;
con

const [index, setIndex] = useState(0);

index es una variable de estado y setIndex es la función que setea el estado.

La sintaxis de [ y ] se le conoce cómo desestructuración de un array y permite leer valores de un array. El array retornado por useState siempre contará con exactamente dos valores.

Así es como funcionan juntos en el handleClick:

function handleClick() {
  setIndex(index + 1);
}

Ahora al hacer clic en el botón “Siguiente” cambia la escultura actual: