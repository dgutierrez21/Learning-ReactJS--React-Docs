Referenciar valores con refs
Cuando quieres que un componente “recuerde” alguna información, pero no quieres que esa información provoque nuevos renderizados, puedes usar una ref.

Aprenderás
Cómo añadir una ref a tu componente
Cómo actualizar el valor de una ref
En qué se diferencian las refs y el estado
Cómo usar las refs de manera segura

Añadir una ref a tu componente
Puedes añadir una ref a tu componente importando el Hook useRef desde React:

import { useRef } from 'react';

Dentro de tu componente, llama al Hook useRef y pasa el valor inicial al que quieres hacer referencia como único argumento. Por ejemplo, esta es una ref al valor 0:

const ref = useRef(0);

useRef devuelve un objeto como este:

{ 
  current: 0 // El valor que le pasaste a useRef
}

Una flecha con que tiene escrito 'current' metida en un bolsillo que tiene escrito 'ref'.

ver imagen...

Puedes acceder al valor actual de esa ref a través de la propiedad ref.current. Este valor es mutable intencionalmente, lo que significa que puedes tanto leerlo como modificarlo. Es como un bolsillo secreto de tu componente que React no puede rastrear. (Esto es lo que lo hace una “puerta de escape” del flujo de datos de una vía de React: ¡Más sobre eso a continuación!)

Aquí, un botón incrementará ref.current en cada clic:

...

La ref hace referencia a un número, pero, al igual que el estado, podrías hace referencia a cualquier cosa: un string, un objeto, o incluso una función. A diferencia del estado, la ref es un objeto plano de JavaScript con la propiedad current que puedes leer y modificar.

Fíjate como el componente no se rerenderiza con cada incremento. React (al igual que con el estado) preserva las refs entre rerenderizados. Sin embargo, asignar el estado rerenderiza un componente. ¡Cambiar una ref no!

Ejemplo: crear un cronómetro
Puedes combinar las refs y el estado en un solo componente. Por ejemplo, hagamos un cronómetro que el usuario pueda iniciar y detener al presionar un botón. Para poder mostrar cuánto tiempo ha pasado desde que el usuario pulsó “Iniciar”, necesitarás mantener rastreado cuándo el botón de Iniciar fue presionado y cuál es el tiempo actual. Esta información se usa para el renderizado, así que guárdala en el estado:

...

Cuando el usuario presione “Iniciar”, usarás setInterval para poder actualizar el tiempo cada 10 milisegundos:

...

Cuando se presiona el botón “Detener”, necesitas cancelar el intervalo existente para que deje de actualizar la variable de estado now. Puedes hacerlo con una llamada a clearInterval, pero necesitas pasarle el identificador del intervalo que fue previamente devuelto por la llamada a setInterval cuando el usuario presionó Iniciar. Necesitas guardar el identificador del intervalo en alguna parte. Como el identificador de un intervalo no se usa para el renderizado, puedes guardarlo en una ref:

...

Cuando una pieza de información es usada para el renderizado, guárdala en el estado. Cuando una pieza de información solo se necesita en los manejadores de eventos y no requiere un rerenderizado, usar una ref quizás sea más eficiente.
