Ciclo de vida de los efectos reactivos
Los efectos tienen un ciclo de vida diferente al de los componentes. Los componentes pueden montarse, actualizarse o desmontarse. Un efecto solo puede hacer dos cosas: comenzar a sincronizar algo y, más tarde, dejar de sincronizarlo. Este ciclo puede ocurrir varias veces si su efecto depende de los accesorios y el estado que cambia con el tiempo. React proporciona una regla de linter para comprobar que ha especificado correctamente las dependencias de su efecto. Esto mantiene tu efecto sincronizado con los últimos accesorios y estados.

Aprenderás
En qué se diferencia el ciclo de vida de un efecto del ciclo de vida de un componente
Cómo pensar en cada efecto individual de forma aislada
Cuándo es necesario volver a sincronizar Effect y por qué
Cómo se determinan las dependencias de su efecto
Qué significa que un valor sea reactivo
Qué significa una matriz de dependencias vacía
Cómo React verifica que sus dependencias son correctas con un linter
Qué hacer cuando no estás de acuerdo con el linter

El ciclo de vida de un efecto
Cada componente de React pasa por el mismo ciclo de vida:

    --Un componente se monta cuando se agrega a la pantalla.
    --Un componente se actualiza cuando recibe nuevos accesorios o estado. Esto generalmente sucede en respuesta a una interacción.
    --Un componente se desmonta cuando se retira de la pantalla.

Es una buena manera de pensar en componentes, pero no en efectos. En su lugar, intente pensar en cada efecto independientemente del ciclo de vida de su componente. Un efecto describe cómo sincronizar un sistema externo con los accesorios y el estado actuales. A medida que cambie el código, esta sincronización tendrá que ocurrir con más o menos frecuencia.

Para ilustrar este punto, considere este efecto de conexión del componente a un servidor de chat:

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}

El cuerpo de tu efecto especifica cómo iniciar la sincronización:
    // ...
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
    // ...

La función de limpieza devuelta por el efecto especifica cómo detener la sincronización:
    // ...
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
    // ...

Intuitivamente, podría pensar que React comenzaría a sincronizarse cuando su componente se monta y dejaría de sincronizarse cuando su componente se desmonta. Sin embargo, ¡este no es el final de la historia! A veces, también puede ser necesario iniciar y detener la sincronización varias veces mientras el componente permanece montado.

Veamos por qué esto es necesario, cuándo sucede y cómo puede controlar este comportamiento.

Nota
Algunos efectos no devuelven una función de limpieza en absoluto. La mayoría de las veces, querrá devolver uno, pero si no lo hace, React se comportará como si devolviera una función de limpieza vacía que no hace nada.

Por qué puede ser necesario realizar la sincronización más de una vez
Imagine que este componente ChatRoom recibe un accesorio roomId que el usuario selecciona en un menú desplegable. Digamos que inicialmente el usuario elige la sala ""general" como roomId. La aplicación muestra el salón de chat "general":

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId /* "general" */ }) {
  // ...
  return <h1>Welcome to the {roomId} room!</h1>;
}

Después de que se muestre la interfaz de usuario, React ejecutará su efecto para comenzar a sincronizar. Se conecta a la sala "general":

function ChatRoom({ roomId /* "general" */ }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Connects to the "general" room
    connection.connect();
    return () => {
      connection.disconnect(); // Disconnects from the "general" room
    };
  }, [roomId]);
  // ...

Hasta ahora, bien.

Más tarde, el usuario elige una habitación diferente en el menú desplegable (por ejemplo, "travel" Primero, React actualizará la interfaz de usuario:

function ChatRoom({ roomId /* "travel" */ }) {
  // ...
  return <h1>Welcome to the {roomId} room!</h1>;
}

Haga una pausa para pensar en lo que debería suceder a continuación. El usuario ve que ""travel" es el salón de chat seleccionado en la interfaz de usuario. Sin embargo, el efecto que se ejecutó la última vez todavía está conectado a la sala "general" El prop roomId ha cambiado, por lo que lo que sea que tu efecto haya hecho en ese entonces (conectarse a la sala "general" ya no coincide con la interfaz de usuario.

En este punto, desea que React haga dos cosas:

    1. Detener la sincronización con el roomId antiguo (desconectarse de la sala "general"
    2. Comience a sincronizar con el nuevo roomId (conéctese a la sala "travel"
    
¡Afortunadamente, ya le has enseñado a React cómo hacer ambas cosas! El cuerpo del efecto especifica cómo iniciar la sincronización y la función de limpieza especifica cómo detener la sincronización. Todo lo que React necesita hacer ahora es llamarlos en el orden correcto y con los accesorios y el estado correctos. Veamos cómo sucede exactamente eso.

Cómo React vuelve a sincronizar tu efecto
Recuerde que su componente ChatRoom ha recibido un nuevo valor para su prop roomId. Solía ser ""general" y ahora es "travel" React necesita volver a sincronizar tu efecto para volver a conectarte a una habitación diferente.

Para detener la sincronización, React llamará a la función de limpieza que su efecto devolvió después de conectarse a la habitación "general" Dado que roomId era "general", la función de limpieza se desconecta de la sala "general":"general"

function ChatRoom({ roomId /* "general" */ }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Connects to the "general" room
    connection.connect();
    return () => {
      connection.disconnect(); // Disconnects from the "general" room
    };
    // ...
    
Luego, React ejecutará el efecto que ha proporcionado durante este renderizado. Esta vez, roomId es "travel", por lo que comenzará a sincronizarse con la sala de chat "travel" (hasta que finalmente se llame también a su función de limpieza):"travel"

function ChatRoom({ roomId /* "travel" */ }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Connects to the "travel" room
    connection.connect();
    // ...

Gracias a esto, ahora está conectado a la misma habitación que el usuario eligió en la interfaz de usuario. ¡Desastre evitado!

Cada vez que el componente se vuelva a renderizar con un roomId diferente, el efecto se volverá a sincronizar. Por ejemplo, supongamos que el usuario cambia roomId de ""travel"" a "music" React volverá a dejar de sincronizar tu efecto llamando a su función de limpieza (desconectándote de la sala de "travel" Luego comenzará a sincronizarse nuevamente ejecutando su cuerpo con el nuevo accesorio roomId (que lo conecta a la sala "music"").

Finalmente, cuando el usuario va a una pantalla diferente, ChatRoom se desmonta. Ahora no hay necesidad de permanecer conectado en absoluto. React dejará de sincronizar su efecto por última vez y lo desconectará de la sala de chat de "music"

Pensar desde la perspectiva del efecto
Recapitulemos todo lo que ha sucedido desde la perspectiva del componente ChatRoom:

    1. ChatRoom montada con roomId establecido en ""general"
    2. ChatRoom actualizada con roomId configurado para ""travel"
    3. ChatRoom actualizada con roomId configurado en ""music"
    4. ChatRoom desmontada

Durante cada uno de estos puntos del ciclo de vida del componente, su efecto hizo cosas diferentes:

    1. Su efecto conectado a la sala ""general"
    2. Su efecto desconectado de la sala ""general"" y conectado a la sala ""travel"
    3. Su efecto se desconectó de la sala de ""travel"" y se conectó a la sala de ""music"
    4. Tu efecto desconectado de la sala "music"
    Ahora pensemos en lo que sucedió desde la perspectiva del Efecto mismo:

  useEffect(() => {
    // Your Effect connected to the room specified with roomId...
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      // ...until it disconnected
      connection.disconnect();
    };
  }, [roomId]);

La estructura de este código podría inspirarle a ver lo que sucedió como una secuencia de períodos de tiempo no superpuestos:

    1. Su efecto conectado a la habitación ""general" (hasta que se desconectó)
    2. Su efecto conectado a la sala "travel" (hasta que se desconectó)
    3. Su efecto conectado a la sala "music" (hasta que se desconectó)

Anteriormente, estabas pensando desde la perspectiva del componente. Cuando se miraba desde la perspectiva del componente, era tentador pensar en los efectos como "devoluciones de llamada" o "eventos del ciclo de vida" que se activan en un momento específico como "después de un renderizado" o "antes de desmontar". Esta forma de pensar se complica muy rápido, por lo que es mejor evitarla.

En su lugar, concéntrese siempre en un solo ciclo de inicio / parada a la vez. No debería importar si un componente se está montando, actualizando o desmontando. Todo lo que necesita hacer es describir cómo iniciar la sincronización y cómo detenerla. Si lo haces bien, tu efecto será resistente a ser iniciado y detenido tantas veces como sea necesario.

Esto podría recordarle cómo no piensa si un componente se está montando o actualizando cuando escribe la lógica de representación que crea JSX. Usted describe lo que debería estar en la pantalla, y React resuelve el resto.

Cómo verifica React que tu efecto puede volver a sincronizarse
Aquí hay un ejemplo en vivo con el que puedes jugar. Presione "Abrir chat" para montar el componente ChatRoom:

...

Observe que cuando el componente se monta por primera vez, verá tres registros:

1. ✅ Connecting to "general" room at https://localhost:1234... (solo desarrollo)
2. ❌ Disconnected from "general" room at https://localhost:1234. (solo desarrollo)
3. ✅ Connecting to "general" room at https://localhost:1234...

Los dos primeros registros son sólo de desarrollo. En el desarrollo, React siempre vuelve a montar cada componente una vez. En otras palabras, React verifica que su efecto puede volver a sincronizarse forzándolo a hacerlo inmediatamente en el desarrollo. Esto podría recordarle cómo puede abrir la puerta y cerrarla un tiempo adicional para verificar que la cerradura de la puerta funcione. React inicia y detiene tu efecto una vez más en desarrollo para comprobar que has implementado bien su limpieza.

La razón principal por la que su efecto se volverá a sincronizar en la práctica es si algunos datos que utiliza han cambiado. En el espacio aislado anterior, cambie el salón de chat seleccionado. Observe cómo, cuando cambia roomId, su efecto se vuelve a sincronizar.

Sin embargo, también hay casos más inusuales en los que es necesaria la resincronización. Por ejemplo, intente editar serverUrl en el espacio aislado anterior mientras el chat está abierto. Observe cómo el efecto se vuelve a sincronizar en respuesta a las ediciones del código. En el futuro, React puede agregar más funciones que aprovechen la resincronización.

Cómo sabe React que necesita volver a sincronizar el efecto
Es posible que se pregunte cómo React sabía que su efecto necesitaba volver a sincronizarse después de los cambios roomId. Es porque le dijiste a React que el código de este efecto depende de roomId al incluirlo en la lista de dependencias:

function ChatRoom({ roomId }) { // The roomId prop may change over time
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // This Effect reads roomId 
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]); // So you tell React that this Effect "depends on" roomId
  // ...

Así es como funciona esto:

    1. Sabías que roomId es un accesorio, lo que significa que puede cambiar con el tiempo.
    2. Sabías que tu efecto lee roomId (por lo que su lógica depende de un valor que puede cambiar más adelante).
    3. Esta es la razón por la que lo especificó como dependencia de su efecto (para que se vuelva a sincronizar cuando cambie roomId).

Cada vez que su componente se vuelva a renderizar, React mirará la matriz de dependencias que ha pasado. Si alguno de los valores de la matriz es diferente del valor en el mismo lugar que pasó durante el renderizado anterior, React volverá a sincronizar su efecto. Por ejemplo, si pasaste ["general"] durante el renderizado inicial, y luego pasaste ["travel"] durante el siguiente renderizado, React comparará ""general"" y ["general"] "travel"["travel"] Estos son valores diferentes (en comparación con Object.is), por lo que React volverá a sincronizar su efecto. Por otro lado, si el componente se vuelve a renderizar pero roomId no ha cambiado, el efecto permanecerá conectado a la misma habitación.

Cada efecto representa un proceso de sincronización independiente
Resista agregar lógica no relacionada a su efecto solo porque esta lógica debe ejecutarse al mismo tiempo que un efecto que ya escribió. Por ejemplo, supongamos que desea enviar un evento de análisis cuando el usuario visita la sala. Ya tiene un efecto que depende de roomId, por lo que puede sentirse tentado a agregar la llamada de análisis allí mismo:

function ChatRoom({ roomId }) {
  useEffect(() => {
    logVisit(roomId);
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}

Pero imagina que más tarde agregas otra dependencia a este Efecto que necesita restablecer la conexión. Si este efecto se vuelve a sincronizar, también llamará a logVisit(roomId) para la misma sala, lo que no pretendía. Registrar la visita es un proceso separado de la conexión. Es por eso que deben escribirse como dos efectos separados:

function ChatRoom({ roomId }) {
  useEffect(() => {
    logVisit(roomId);
  }, [roomId]);

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    // ...
  }, [roomId]);
  // ...
}

Cada efecto del código debe representar un proceso de sincronización independiente e independiente.

En el ejemplo anterior, eliminar un efecto no rompería la lógica del otro efecto. Esta es una buena indicación de que sincronizan diferentes cosas, por lo que tenía sentido dividirlas. Por otro lado, si divide una pieza cohesiva de lógica en efectos separados, el código puede parecer "más limpio" pero será más difícil de mantener. Es por eso que debe pensar si los procesos son iguales o separados, no si el código se ve más limpio.

Los efectos "reaccionan" a los valores reactivos
El efecto lee dos variables (serverUrl y roomId), pero sólo ha especificado roomId como dependencia:

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId]);
  // ...
}

¿Por qué serverUrl no necesita ser una dependencia?

Esto se debe a que serverUrl nunca cambia debido a un reprocesamiento. Siempre es el mismo sin importar cuántas veces y con qué accesorios y estado el componente se vuelve a renderizar. Dado que serverUrl nunca cambia, no tendría sentido especificarlo como una dependencia. Después de todo, ¡las dependencias solo hacen algo cuando cambian con el tiempo!

Por otro lado, roomId puede ser diferente en un re-renderizado. Los accesorios, el estado y otros valores declarados dentro del componente son reactivos porque se calculan durante la representación y participan en el flujo de datos de React.

Si serverUrl fuera una variable de estado, sería reactiva. Los valores reactivos deben incluirse en las dependencias:

function ChatRoom({ roomId }) { // Props change over time
  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // State may change over time

  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Your Effect reads props and state
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId, serverUrl]); // So you tell React that this Effect "depends on" on props and state
  // ...
}

Al incluir serverUrl como dependencia, se asegura de que el efecto se vuelva a sincronizar después de que cambie.

Intente cambiar el salón de chat seleccionado o edite la URL del servidor en este espacio aislado:

...

Cada vez que cambia un valor reactivo como roomId o serverUrl, el efecto se vuelve a conectar al servidor de chat.

Qué significa un efecto con dependencias vacías
¿Qué sucede si mueve serverUrl y roomId fuera del componente?

const serverUrl = 'https://localhost:1234';
const roomId = 'general';

function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, []); // ✅ All dependencies declared
  // ...
}

Ahora el código de su efecto no utiliza ningún valor reactivo, por lo que sus dependencias pueden estar vacías ([]).

Si piensa desde la perspectiva del componente, la matriz de dependencias [] vacía significa que este efecto se conecta al salón de chat solo cuando se monta el componente y se desconecta solo cuando el componente se desmonta. (Tenga en cuenta que React aún lo volvería a sincronizar un tiempo adicional en desarrollo para probar la lógica de su efecto).

Sin embargo, si piensas desde la perspectiva del Efecto, no necesitas pensar en montar y desmontar en absoluto. Lo importante es que has especificado lo que hace tu efecto para iniciar y detener la sincronización. Hoy en día, no tiene dependencias reactivas. Pero si alguna vez desea que el usuario cambie roomId o serverUrl con el tiempo (por lo que tendría que volverse reactivo), el código de su efecto no cambiará. Solo necesitarás agregarlos a las dependencias.

Todas las variables declaradas en el cuerpo del componente son reactivas
Los accesorios y el estado no son los únicos valores reactivos. Los valores que se calculan a partir de ellos también son reactivos. Si los accesorios o el estado cambian, el componente se volverá a representar y los valores calculados a partir de ellos también cambiarán. Esta es la razón por la que todas las variables del cuerpo del componente utilizado por el efecto también deben estar en la lista de dependencias del efecto.

Digamos que el usuario puede elegir un servidor de chat en el menú desplegable, pero también puede configurar un servidor predeterminado en la configuración. Supongamos que ya ha puesto el estado de configuración en un contexto para que lea la settings de ese contexto. Ahora calcula serverUrl en función del servidor seleccionado a partir de props y el servidor predeterminado a partir del contexto:

function ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive
  const settings = useContext(SettingsContext); // settings is reactive
  const serverUrl = selectedServerUrl ?? settings.defaultServerUrl; // serverUrl is reactive
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Your Effect reads roomId and serverUrl
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [roomId, serverUrl]); // So it needs to re-synchronize when either of them changes!
  // ...
}

En este ejemplo, serverUrl no es un prop o una variable de estado. Es una variable regular que se calcula durante el renderizado. Pero se calcula durante el renderizado, por lo que puede cambiar debido a un nuevo renderizado. Por eso es reactivo.

Todos los valores dentro del componente (incluidos los accesorios, el estado y las variables en el cuerpo del componente) son reactivos. Cualquier valor reactivo puede cambiar en un reprocesamiento, por lo que debe incluir valores reactivos como dependencias de Effect.

En otras palabras, los efectos "reaccionan" a todos los valores del cuerpo componente.

React verifica que haya especificado cada valor reactivo como una dependencia
Si su linter está configurado para React, comprobará que cada valor reactivo utilizado por el código de su efecto se declara como su dependencia. Por ejemplo, este es un error de lint porque tanto roomId como serverUrl son reactivos:

https://beta.reactjs.org/learn/lifecycle-of-reactive-effects#react-verifies-that-you-specified-every-reactive-value-as-a-dependency

Esto puede parecer un error de React, pero realmente React está señalando un error en su código. Tanto roomId como serverUrl pueden cambiar con el tiempo, pero olvidas volver a sincronizar tu efecto cuando cambian. Como resultado, permanecerá conectado a roomId y serverUrl iniciales incluso después de que el usuario elija valores diferentes en la interfaz de usuario.

Para corregir el error, siga la sugerencia del linter para especificar roomId y serverUrl como dependencias de su efecto:

function ChatRoom({ roomId, serverUrl }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, [serverUrl, roomId]); // ✅ All dependencies declared
  // ...
}

Pruebe esta solución en el entorno de pruebas anterior. Verifique que el error linter haya desaparecido y que el chat se vuelva a conectar cuando sea necesario.

Nota
En algunos casos, React sabe que un valor nunca cambia aunque esté declarado dentro del componente. Por ejemplo, la función set devuelta por useState y el objeto ref devuelto por useRef son estables: se garantiza que no cambiarán en una nueva representación. Los valores estables no son reactivos, por lo que el linter le permite omitirlos de la lista. Sin embargo, incluirlos está permitido: no cambiarán, así que no importa.

Qué hacer cuando no desea volver a sincronizar
En el ejemplo anterior, ha corregido el error lint enumerando roomId y serverUrl como dependencias.

Sin embargo, en su lugar podría "probar" al linter que estos valores no son valores reactivos, es decir, que no pueden cambiar como resultado de un re-renderizado. Por ejemplo, si serverUrl y roomId no dependen de la representación y siempre tienen los mismos valores, puede moverlos fuera del componente. Ahora no necesitan ser dependencias:

const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive
const roomId = 'general'; // roomId is not reactive

function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, []); // ✅ All dependencies declared
  // ...
}

También puedes moverlos dentro del efecto. No se calculan durante el renderizado, por lo que no son reactivos:

function ChatRoom() {
  useEffect(() => {
    const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive
    const roomId = 'general'; // roomId is not reactive
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => {
      connection.disconnect();
    };
  }, []); // ✅ All dependencies declared
  // ...
}

Los efectos son bloques de código reactivos. Se vuelven a sincronizar cuando cambian los valores que lees dentro de ellos. A diferencia de los controladores de eventos, que solo se ejecutan una vez por interacción, Effects se ejecuta siempre que la sincronización es necesaria.

No puedes "elegir" tus dependencias. Las dependencias deben incluir todos los valores reactivos que lea en el efecto. El linter hace cumplir esto. A veces, esto puede provocar problemas como bucles infinitos y que su efecto se vuelva a sincronizar con demasiada frecuencia. ¡No solucione estos problemas suprimiendo el linter! Esto es lo que puedes probar en su lugar:

  --Compruebe que su efecto representa un proceso de sincronización independiente. Si tu efecto no sincroniza nada, puede que no sea necesario. Si sincroniza varias cosas independientes, divídelo.

  --Si desea leer el último valor de los accesorios o el estado sin "reaccionar" a él y volver a sincronizar el efecto, puede dividir su efecto en una parte reactiva (que mantendrá en el efecto) y una parte no reactiva (que extraerá en algo llamado función de evento). Obtenga más información sobre cómo separar eventos de efectos.

  --Evite confiar en objetos y funciones como dependencias. Si crea objetos y funciones durante el procesamiento y luego los lee desde un efecto, serán diferentes en cada procesamiento. Esto hará que tu efecto se vuelva a sincronizar cada vez. Obtén más información sobre cómo eliminar dependencias innecesarias de tus efectos.

Atención
El linter es tu amigo, pero sus poderes son limitados. El linter solo sabe cuándo las dependencias son incorrectas. No sabe la mejor manera de resolver cada caso. Si el linter sugiere una dependencia, pero agregarlo causa un bucle, no significa que el linter deba ignorarse. Significa que necesita cambiar el código dentro (o fuera) del efecto para que ese valor no sea reactivo y no necesite ser una dependencia.

Si tiene una base de código existente, es posible que tenga algunos efectos que supriman el linter como este:

useEffect(() => {
  // ...
  // 🔴 Avoid suppressing the linter like this:
  // eslint-ignore-next-line react-hooks/exhaustive-dependencies
}, []);

En las páginas siguientes, aprenderá cómo corregir este código sin romper las reglas. ¡Siempre vale la pena arreglarlo!