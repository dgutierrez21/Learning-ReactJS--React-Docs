Reutilización de la lógica con ganchos personalizados
React viene con varios ganchos incorporados como useState, useContext y useEffect. A veces, desearás que hubiera un Hook para algún propósito más específico: por ejemplo, para obtener datos, para realizar un seguimiento de si el usuario está en línea o para conectarse a una sala de chat. Es posible que no encuentre estos ganchos en React, pero puede crear sus propios ganchos para las necesidades de su aplicación.

Aprenderás
Qué son los ganchos personalizados y cómo escribir los tuyos propios
Cómo reutilizar la lógica entre componentes
Cómo nombrar y estructurar tus ganchos personalizados
Cuándo y por qué extraer ganchos personalizados

Ganchos personalizados: uso compartido de lógica entre componentes
Imagine que está desarrollando una aplicación que depende en gran medida de la red (como lo hacen la mayoría de las aplicaciones). Desea advertir al usuario si su conexión de red se ha apagado accidentalmente mientras usaba su aplicación. ¿Cómo lo harías?

Parece que necesitará dos cosas en su componente:

1- Un pedazo de estado que rastrea si la red está en línea.
2- Un efecto que se suscribe a los eventos globales online y offline, y actualiza ese estado.

Esto mantendrá su componente sincronizado con el estado de la red. Puede comenzar con algo como esto:

...

Intente activar y desactivar su red, y observe cómo esta StatusBar se actualiza en respuesta a sus acciones.

Ahora imagina que también quieres usar la misma lógica en un componente diferente. Desea implementar un botón Guardar que se deshabilitará y mostrará "Reconectando..." en lugar de "Guardar" mientras la red está apagada.

Para empezar, puede copiar y pegar el estado isOnline y el efecto en SaveButton:

...

Compruebe que, si apaga la red, el botón cambiará su apariencia.

Estos dos componentes funcionan bien, pero la duplicación de lógica entre ellos es desafortunada. Parece que a pesar de que tienen una apariencia visual diferente, desea reutilizar la lógica entre ellos.

Extraer su propio gancho personalizado de un componente
Imagine por un momento que, similar a useState y useEffect, hubiera un gancho useOnlineStatus incorporado. Luego, ambos componentes podrían simplificarse y podría eliminar la duplicación entre ellos:

function StatusBar() {
  const isOnline = useOnlineStatus();
  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;
}

function SaveButton() {
  const isOnline = useOnlineStatus();

  function handleSaveClick() {
    console.log('✅ Progress saved');
  }

  return (
    <button disabled={!isOnline} onClick={handleSaveClick}>
      {isOnline ? 'Save progress' : 'Reconnecting...'}
    </button>
  );
}

Aunque no existe tal Hook incorporado, puedes escribirlo tú mismo. Declare una función llamada useOnlineStatus y mueva todo el código duplicado desde los componentes que escribió anteriormente:

...

Al final de la función, return isOnline. Esto permite que los componentes lean ese valor:

...

Compruebe que al activar y desactivar la red se actualizan ambos componentes.

Ahora sus componentes no tienen tanta lógica repetitiva. Más importante aún, el código dentro de ellos describe lo que quieren hacer (¡use el estado en línea!) en lugar de cómo hacerlo (suscribiéndose a los eventos del navegador).

Cuando extrae la lógica en ganchos personalizados, puede ocultar los detalles retorcidos de cómo trata con algún sistema externo o una API del navegador. El código de sus componentes expresa su intención, no la implementación.

Los nombres de gancho siempre comienzan con use
Las aplicaciones de React se construyen a partir de componentes. Los componentes se construyen a partir de ganchos, ya sean integrados o personalizados. Es probable que a menudo uses ganchos personalizados creados por otros, ¡pero ocasionalmente puedes escribir uno tú mismo!

Debe seguir estas convenciones de nomenclatura:

1- Los nombres de los componentes de React deben comenzar con una letra mayúscula, como StatusBar y SaveButton. Los componentes de React también necesitan devolver algo que React sabe cómo mostrar, como una pieza de JSX.

2- Los nombres de gancho deben comenzar use con use seguido de una letra mayúscula, como useState (incorporado) o useOnlineStatus (personalizado, como anteriormente en la página). Los ganchos pueden devolver valores arbitrarios.
Esta convención garantiza que siempre puede mirar un componente y saber dónde podrían "esconderse" su estado, efectos y otras características de React. Por ejemplo, si ve una llamada a la función getColor() dentro de su componente, puede estar seguro de que no puede contener el estado React dentro porque su nombre no comienza con use. Sin embargo, una llamada a la función como useOnlineStatus() probablemente contendrá llamadas a otros Hooks dentro.

Nota
Si su linter está configurado para React, aplicará esta convención de nomenclatura. Desplácese hasta el espacio aislado anterior y cambie el nombre useOnlineStatus.getOnlineStatus Tenga en cuenta que el linter ya no le permitirá llamar a useState o useEffect dentro de él. ¡Solo los ganchos y componentes pueden llamar a otros ganchos!

Los ganchos personalizados le permiten compartir lógica con estado, no el estado en sí mismo

En el ejemplo anterior, cuando se activaba y desactivaba la red, ambos componentes se actualizaban juntos. Sin embargo, es erróneo pensar que una sola variable isOnline se comparte entre ellos. Mira este código:

function StatusBar() {
  const isOnline = useOnlineStatus();
  // ...
}

function SaveButton() {
  const isOnline = useOnlineStatus();
  // ...
}

Funciona de la misma manera que antes de extraer la duplicación:

function StatusBar() {
  const [isOnline, setIsOnline] = useState(true);
  useEffect(() => {
    // ...
  }, []);
  // ...
}

function SaveButton() {
  const [isOnline, setIsOnline] = useState(true);
  useEffect(() => {
    // ...
  }, []);
  // ...
}

¡Estas son dos variables de estado y efectos completamente independientes! Solo tenían el mismo valor al mismo tiempo porque los sincronizó con el mismo valor externo (si la red está encendida).

Para ilustrar mejor esto, necesitaremos un ejemplo diferente. Considere este componente Form:

...

Hay cierta lógica repetitiva para cada campo de formulario:

1. Hay un fragmento de estado (firstName y lastName).
2. Hay un controlador de cambios (handleFirstNameChange handleLastNameChange).
3. Hay una parte de JSX que especifica el value y los atributos onChange para esa entrada.

Puede extraer la lógica repetitiva en este gancho personalizado useFormInput:

...

Observe que sólo declara una variable de estado denominada value.

Sin embargo, el componente Form llama a useFormInput dos veces: Form
function Form() {
  const firstNameProps = useFormInput('Mary');
  const lastNameProps = useFormInput('Poppins');
  // ...

¡Es por eso que funciona como declarar dos variables de estado separadas!

Los ganchos personalizados le permiten compartir lógica con estado, pero no el estado en sí. Cada llamada a un Hook es completamente independiente de cualquier otra llamada al mismo Hook. Esta es la razón por la que las dos cajas de arena anteriores son completamente equivalentes. Si lo desea, desplácese hacia arriba y compárelos. El comportamiento antes y después de extraer un gancho personalizado es idéntico.

Cuando necesite compartir el estado entre varios componentes, levántelo y páselo hacia abajo.

Pasar valores reactivos entre ganchos
El código dentro de sus ganchos personalizados se volverá a ejecutar durante cada re-renderizado de su componente. Esta es la razón por la que, al igual que los componentes, los ganchos personalizados deben ser puros. ¡Piensa en el código personalizado de Hooks como parte del cuerpo de tu componente!

Debido a que los ganchos personalizados se vuelven a renderizar junto con su componente, siempre reciben los últimos accesorios y estado. Para ver lo que esto significa, considere este ejemplo de sala de chat. Cambie la URL del servidor o el salón de chat seleccionado:

https://codesandbox.io/s/x43dm1?file=%2FChatRoom.js&utm_medium=sandpack

Cuando cambia serverUrl o roomId, el efecto "reacciona" a los cambios y se vuelve a sincronizar. Puede saber por los mensajes de la consola que el chat se vuelve a conectar cada vez que cambia las dependencias de su efecto.

Ahora mueva el código del efecto a un gancho personalizado:

...

export function useChatRoom({ serverUrl, roomId }) {
  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    connection.on('message', (msg) => {
      showNotification('New message: ' + msg);
    });
    return () => connection.disconnect();
  }, [roomId, serverUrl]);
}

Esto permite que su componente ChatRoom llame a su Hook personalizado sin preocuparse por cómo funciona dentro:

export default function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useChatRoom({
    roomId: roomId,
    serverUrl: serverUrl
  });

  return (
    <>
      <label>
        Server URL:
        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />
      </label>
      <h1>Welcome to the {roomId} room!</h1>
    </>
  );
}

¡Esto parece mucho más simple! (Pero hace lo mismo).

Observe que la lógica aún responde a los cambios de prop y estado. Intente editar la URL del servidor o la sala seleccionada:

https://codesandbox.io/s/2bjiw9?file=%2FChatRoom.js&utm_medium=sandpack

Observa cómo estás tomando el valor de retorno de un gancho:

export default function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useChatRoom({
    roomId: roomId,
    serverUrl: serverUrl
  });
  // ...

y páselo como entrada a otro Hook:

export default function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useChatRoom({
    roomId: roomId,
    serverUrl: serverUrl
  });
  // ...

Cada vez que el componente ChatRoom se vuelve a procesar, pasa el último roomId y serverUrl a tu Hook. Esta es la razón por la que su efecto se vuelve a conectar al chat cada vez que sus valores son diferentes después de un nuevo renderizado. (Si alguna vez trabajaste con software de procesamiento de música, encadenar ganchos como este podría recordarte a encadenar múltiples efectos de audio, como agregar reverberación o coro. Es como si la salida de useState "alimentara" la entrada de useChatRoom.)

Pasar controladores de eventos a hooks personalizados
En obra
En esta sección se describe una API experimental que aún no se ha agregado a React, por lo que aún no puede usarla.

A medida que comience a usar useChatRoom en más componentes, es posible que desee permitir que diferentes componentes personalicen su comportamiento. Por ejemplo, actualmente, la lógica de qué hacer cuando llega un mensaje está codificada dentro del Hook:

export function useChatRoom({ serverUrl, roomId }) {
  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    connection.on('message', (msg) => {
      showNotification('New message: ' + msg);
    });
    return () => connection.disconnect();
  }, [roomId, serverUrl]);
}

Supongamos que desea volver a mover esta lógica a su componente:

export default function ChatRoom({ roomId }) {
  const [serverUrl, setServerUrl] = useState('https://localhost:1234');

  useChatRoom({
    roomId: roomId,
    serverUrl: serverUrl,
    onReceiveMessage(msg) {
      showNotification('New message: ' + msg);
    }
  });
  // ...

Para que esto funcione, cambie su Hook personalizado para tomar onReceiveMessage como una de sus opciones con nombre:

export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {
  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    connection.on('message', (msg) => {
      onReceiveMessage(msg);
    });
    return () => connection.disconnect();
  }, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared
}

Esto funcionará, pero hay una mejora más que puede hacer cuando su Hook personalizado acepta controladores de eventos.

Agregar una dependencia en onReceiveMessage no es ideal porque hará que el chat se vuelva a conectar cada vez que el componente se vuelva a procesar. Ajuste este controlador de eventos en un evento de efecto para quitarlo de las dependencias:

import { useEffect, useEffectEvent } from 'react';
// ...

export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {
  const onMessage = useEffectEvent(onReceiveMessage);

  useEffect(() => {
    const options = {
      serverUrl: serverUrl,
      roomId: roomId
    };
    const connection = createConnection(options);
    connection.connect();
    connection.on('message', (msg) => {
      onMessage(msg);
    });
    return () => connection.disconnect();
  }, [roomId, serverUrl]); // ✅ All dependencies declared
}

Ahora el chat no se volverá a conectar cada vez que el componente ChatRoom se vuelva a procesar. Aquí hay una demostración completamente funcional de pasar un controlador de eventos a un gancho personalizado con el que puedes jugar:

https://codesandbox.io/s/3bzejk?file=%2FChatRoom.js&utm_medium=sandpack

Observe cómo ya no necesita saber cómo funciona useChatRoom para usarlo. Podría agregarlo a cualquier otro componente, pasar cualquier otra opción y funcionaría de la misma manera. Ese es el poder de los ganchos personalizados.

Cuándo usar ganchos personalizados
No es necesario extraer un gancho personalizado para cada pequeño fragmento duplicado de código. Algo de duplicación está bien. Por ejemplo, extraer un enlace useFormInput para ajustar una sola llamada useState como antes probablemente no sea necesario.

Sin embargo, siempre que escriba un efecto, considere si sería más claro envolverlo también en un gancho personalizado. No debería necesitar Effects muy a menudo, por lo que si está escribiendo uno, significa que necesita "salir de React" para sincronizar con algún sistema externo o para hacer algo para lo que React no tiene una API incorporada. Envolver su efecto en un gancho personalizado le permite comunicar con precisión su intención y cómo fluyen los datos a través de él.

Por ejemplo, considere un componente ShippingForm que muestra dos menús desplegables: uno muestra la lista de ciudades y otro muestra la lista de áreas de la ciudad seleccionada. Puede comenzar con algún código que se vea así:

function ShippingForm({ country }) {
  const [cities, setCities] = useState(null);
  // This Effect fetches cities for a country
  useEffect(() => {
    let ignore = false;
    fetch(`/api/cities?country=${country}`)
      .then(response => response.json())
      .then(json => {
        if (!ignore) {
          setCities(json);
        }
      });
    return () => {
      ignore = true;
    };
  }, [country]);

  const [city, setCity] = useState(null);
  const [areas, setAreas] = useState(null);
  // This Effect fetches areas for the selected city
  useEffect(() => {
    if (city) {
      let ignore = false;
      fetch(`/api/areas?city=${city}`)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setAreas(json);
          }
        });
      return () => {
        ignore = true;
      };
    }
  }, [city]);

  // ...

Aunque este código es bastante repetitivo, es correcto mantener estos efectos separados entre sí. Sincronizan dos cosas diferentes, por lo que no debes fusionarlas en un solo efecto. En su lugar, puede simplificar el componente ShippingForm anterior extrayendo la lógica común entre ellos en su propio useData Hook:

function useData(url) {
  const [data, setData] = useState(null);
  useEffect(() => {
    if (url) {
      let ignore = false;
      fetch(url)
        .then(response => response.json())
        .then(json => {
          if (!ignore) {
            setData(json);
          }
        });
      return () => {
        ignore = true;
      };
    }
  }, [url]);
  return data;
}

Ahora puede reemplazar ambos efectos en los componentes ShippingForm con llamadas a useData:

function ShippingForm({ country }) {
  const cities = useData(`/api/cities?country=${country}`);
  const [city, setCity] = useState(null);
  const areas = useData(city ? `/api/areas?city=${city}` : null);
  // ...

La extracción de un gancho personalizado hace que el flujo de datos sea explícito. Alimentas la url y obtienes los data. Al "ocultar" su efecto dentro de useData, también evita que alguien que trabaja en el componente ShippingForm le agregue dependencias innecesarias. Idealmente, con el tiempo, la mayoría de los efectos de tu aplicación estarán en ganchos personalizados.

Los ganchos personalizados te ayudan a migrar a mejores patrones
Los efectos son una "escotilla de escape": los usa cuando necesita "salir de React" y cuando no hay una mejor solución incorporada para su caso de uso. Con el tiempo, el objetivo del equipo de React es reducir al mínimo el número de efectos en su aplicación proporcionando soluciones más específicas a problemas más específicos. Ajustar efectos en hooks personalizados facilita la actualización del código cuando estas soluciones están disponibles. Volvamos a este ejemplo:

https://codesandbox.io/s/4guz4w?file=%2FuseOnlineStatus.js&utm_medium=sandpack

En el ejemplo anterior, useOnlineStatus se implementa con un par de useState y useEffect. Sin embargo, esta no es la mejor solución posible. Hay una serie de casos extremos que no considera. Por ejemplo, asume que cuando el componente se monta, isOnline ya es true, pero esto puede ser incorrecto si la red ya se desconectó. Puede usar el navegador navigator.onLine API para verificar eso, pero usarlo directamente se rompería si ejecuta su aplicación React en el servidor para generar el HTML inicial. En resumen, este código podría mejorarse.

Afortunadamente, React 18 incluye una API dedicada llamada useSyncExternalStore que se encarga de todos estos problemas por usted. Así es como useOnlineStatus Hook, reescrito para aprovechar esta nueva API:

https://codesandbox.io/s/cgds0d?file=%2FuseOnlineStatus.js&utm_medium=sandpack

Observe cómo no fue necesario cambiar ninguno de los componentes para realizar esta migración:

function StatusBar() {
  const isOnline = useOnlineStatus();
  // ...
}

function SaveButton() {
  const isOnline = useOnlineStatus();
  // ...
}

Esta es otra razón por la que envolver efectos en ganchos personalizados a menudo es beneficioso:

1- Haces que el flujo de datos hacia y desde tus efectos sea muy explícito.

2- Deja que sus componentes se centren en la intención en lugar de en la implementación exacta de sus efectos.

3- Cuando React agrega nuevas funciones, puede eliminar esos efectos sin cambiar ninguno de sus componentes.

Al igual que en un sistema de diseño, puede resultarte útil empezar a extraer modismos comunes de los componentes de tu aplicación en ganchos personalizados. Esto mantendrá el código de sus componentes centrado en la intención y le permitirá evitar escribir efectos sin procesar muy a menudo. También hay muchos excelentes ganchos personalizados mantenidos por la comunidad React.

Hay más de una manera de hacerlo
Supongamos que desea implementar una animación de fundido desde cero mediante la API requestAnimationFrame del navegador. Puede comenzar con un efecto que configure un bucle de animación. Durante cada fotograma de la animación, puede cambiar la opacidad del nodo DOM que mantiene en una referencia hasta que llegue a 1. El código puede comenzar así:

https://codesandbox.io/s/m8myrj?file=%2FApp.js&utm_medium=sandpack

Para que el componente sea más legible, puede extraer la lógica en un gancho personalizado useFadeIn:

https://codesandbox.io/s/etbdbr?file=%2FApp.js&utm_medium=sandpack

Puede mantener el código useFadeIn como está, pero también puede refactorizarlo más. Por ejemplo, puede extraer la lógica para configurar el bucle de animación fuera de useFadeIn en un nuevo gancho personalizado llamado useAnimationLoop:

https://codesandbox.io/s/w6nwnb?file=%2FuseFadeIn.js&utm_medium=sandpack

Sin embargo, no tenías que hacer eso. Al igual que con las funciones normales, en última instancia, usted decide dónde dibujar los límites entre las diferentes partes de su código. Por ejemplo, también podría adoptar un enfoque muy diferente. En lugar de mantener la lógica en el efecto, puede mover la mayor parte de la lógica imperativa dentro de una clase JavaScript:

https://codesandbox.io/s/g3wyf0?file=/useFadeIn.js&utm_medium=sandpack

Los efectos te permiten conectar React a sistemas externos. Cuanta más coordinación se necesite entre efectos (por ejemplo, para encadenar múltiples animaciones), más sentido tiene extraer esa lógica de efectos y ganchos completamente como en la caja de arena anterior. Luego, el código que extrajo se convierte en el "sistema externo". Esto permite que tus efectos sigan siendo simples porque solo necesitan enviar mensajes al sistema que has movido fuera de React.

En los ejemplos anteriores se asume que la lógica de fundido debe escribirse en JavaScript. Sin embargo, esta animación de fundido en particular es más simple y mucho más eficiente de implementar con una animación CSS simple:

https://codesandbox.io/s/85bcx7?file=%2Fwelcome.css&utm_medium=sandpack

¡A veces, ni siquiera necesitas un gancho!