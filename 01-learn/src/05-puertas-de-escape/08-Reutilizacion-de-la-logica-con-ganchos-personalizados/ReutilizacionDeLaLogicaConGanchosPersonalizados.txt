Reutilización de la lógica con ganchos personalizados
React viene con varios ganchos incorporados como useState, useContext y useEffect. A veces, desearás que hubiera un Hook para algún propósito más específico: por ejemplo, para obtener datos, para realizar un seguimiento de si el usuario está en línea o para conectarse a una sala de chat. Es posible que no encuentre estos ganchos en React, pero puede crear sus propios ganchos para las necesidades de su aplicación.

Aprenderás
Qué son los ganchos personalizados y cómo escribir los tuyos propios
Cómo reutilizar la lógica entre componentes
Cómo nombrar y estructurar tus ganchos personalizados
Cuándo y por qué extraer ganchos personalizados

Ganchos personalizados: uso compartido de lógica entre componentes
Imagine que está desarrollando una aplicación que depende en gran medida de la red (como lo hacen la mayoría de las aplicaciones). Desea advertir al usuario si su conexión de red se ha apagado accidentalmente mientras usaba su aplicación. ¿Cómo lo harías?

Parece que necesitará dos cosas en su componente:

1- Un pedazo de estado que rastrea si la red está en línea.
2- Un efecto que se suscribe a los eventos globales online y offline, y actualiza ese estado.

Esto mantendrá su componente sincronizado con el estado de la red. Puede comenzar con algo como esto:

...

Intente activar y desactivar su red, y observe cómo esta StatusBar se actualiza en respuesta a sus acciones.

Ahora imagina que también quieres usar la misma lógica en un componente diferente. Desea implementar un botón Guardar que se deshabilitará y mostrará "Reconectando..." en lugar de "Guardar" mientras la red está apagada.

Para empezar, puede copiar y pegar el estado isOnline y el efecto en SaveButton:

...

Compruebe que, si apaga la red, el botón cambiará su apariencia.

Estos dos componentes funcionan bien, pero la duplicación de lógica entre ellos es desafortunada. Parece que a pesar de que tienen una apariencia visual diferente, desea reutilizar la lógica entre ellos.

Extraer su propio gancho personalizado de un componente
Imagine por un momento que, similar a useState y useEffect, hubiera un gancho useOnlineStatus incorporado. Luego, ambos componentes podrían simplificarse y podría eliminar la duplicación entre ellos:

function StatusBar() {
  const isOnline = useOnlineStatus();
  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;
}

function SaveButton() {
  const isOnline = useOnlineStatus();

  function handleSaveClick() {
    console.log('✅ Progress saved');
  }

  return (
    <button disabled={!isOnline} onClick={handleSaveClick}>
      {isOnline ? 'Save progress' : 'Reconnecting...'}
    </button>
  );
}

Aunque no existe tal Hook incorporado, puedes escribirlo tú mismo. Declare una función llamada useOnlineStatus y mueva todo el código duplicado desde los componentes que escribió anteriormente:

...

Al final de la función, return isOnline. Esto permite que los componentes lean ese valor:

...

Compruebe que al activar y desactivar la red se actualizan ambos componentes.

Ahora sus componentes no tienen tanta lógica repetitiva. Más importante aún, el código dentro de ellos describe lo que quieren hacer (¡use el estado en línea!) en lugar de cómo hacerlo (suscribiéndose a los eventos del navegador).

Cuando extrae la lógica en ganchos personalizados, puede ocultar los detalles retorcidos de cómo trata con algún sistema externo o una API del navegador. El código de sus componentes expresa su intención, no la implementación.

Los nombres de gancho siempre comienzan con use
Las aplicaciones de React se construyen a partir de componentes. Los componentes se construyen a partir de ganchos, ya sean integrados o personalizados. Es probable que a menudo uses ganchos personalizados creados por otros, ¡pero ocasionalmente puedes escribir uno tú mismo!

Debe seguir estas convenciones de nomenclatura:

1- Los nombres de los componentes de React deben comenzar con una letra mayúscula, como StatusBar y SaveButton. Los componentes de React también necesitan devolver algo que React sabe cómo mostrar, como una pieza de JSX.

2- Los nombres de gancho deben comenzar use con use seguido de una letra mayúscula, como useState (incorporado) o useOnlineStatus (personalizado, como anteriormente en la página). Los ganchos pueden devolver valores arbitrarios.
Esta convención garantiza que siempre puede mirar un componente y saber dónde podrían "esconderse" su estado, efectos y otras características de React. Por ejemplo, si ve una llamada a la función getColor() dentro de su componente, puede estar seguro de que no puede contener el estado React dentro porque su nombre no comienza con use. Sin embargo, una llamada a la función como useOnlineStatus() probablemente contendrá llamadas a otros Hooks dentro.

Nota
Si su linter está configurado para React, aplicará esta convención de nomenclatura. Desplácese hasta el espacio aislado anterior y cambie el nombre useOnlineStatus.getOnlineStatus Tenga en cuenta que el linter ya no le permitirá llamar a useState o useEffect dentro de él. ¡Solo los ganchos y componentes pueden llamar a otros ganchos!