Manipulación del DOM con Refs
React actualiza automáticamente el DOM para que coincida con su salida de renderizado, por lo que sus componentes a menudo no necesitarán manipularlo. Sin embargo, a veces es posible que necesite acceso a los elementos DOM administrados por React, por ejemplo, para enfocar un nodo, desplazarse hasta él o medir su tamaño y posición. No hay una forma integrada de hacer esas cosas en React, por lo que necesitará una referencia al nodo DOM.

Aprenderás
Cómo acceder a un nodo DOM gestionado por React con el atributo ref
Cómo se relaciona el atributo ref JSX ref gancho useRef
Cómo acceder al nodo DOM de otro componente
En qué casos es seguro modificar el DOM gestionado por React

Obtener una referencia al nodo
Para acceder a un nodo DOM administrado por React, primero, importe el gancho useRef:

import { useRef } from 'react';

Luego, úselo para declarar una referencia dentro de su componente:

const myRef = useRef(null);

Finalmente, páselo al nodo DOM como el atributo ref:

<div ref={myRef}>

El enlace useRef devuelve un objeto con una sola propiedad denominada current. Inicialmente, myRef.current será null. Cuando React crea un nodo DOM para este <div>, React pondrá una referencia a este nodo en myRef.current A continuación, puede acceder a este nodo DOM desde los controladores de eventos y utilizar las API de explorador integradas definidas en él.

// You can use any browser APIs, for example:
myRef.current.scrollIntoView();

Ejemplo: enfocar una entrada de texto
En este ejemplo, al hacer clic en el botón se enfocará la entrada:

...

Para implementar esto:

1. Declare inputRef con el gancho useRef.

2. Páselo como <input ref={inputRef}>. Esto le dice a React que ponga el nodo DOM de este <input> en inputRef.current<input>

3. En la función handleClick, lea el nodo DOM de entrada de inputRef.current y llame a focus() con inputRef.currentfocus() inputRef.current.focus().

4. Pase el controlador de eventos handleClick a <button> con onClick.

Si bien la manipulación DOM es el caso de uso más común para refs, useRef Hook se puede usar para almacenar otras cosas fuera de React, como ID de temporizador. De manera similar al estado, las referencias permanecen entre los renders. Las referencias son como variables de estado que no activan rerepresentaciones cuando las establece. Para obtener una introducción a las referencias, consulte https://beta.es.reactjs.org/learn/referencing-values-with-refs