Manipulación del DOM con Refs
React actualiza automáticamente el DOM para que coincida con su salida de renderizado, por lo que sus componentes a menudo no necesitarán manipularlo. Sin embargo, a veces es posible que necesite acceso a los elementos DOM administrados por React, por ejemplo, para enfocar un nodo, desplazarse hasta él o medir su tamaño y posición. No hay una forma integrada de hacer esas cosas en React, por lo que necesitará una referencia al nodo DOM.

Aprenderás
Cómo acceder a un nodo DOM gestionado por React con el atributo ref
Cómo se relaciona el atributo ref JSX ref gancho useRef
Cómo acceder al nodo DOM de otro componente
En qué casos es seguro modificar el DOM gestionado por React

Obtener una referencia al nodo
Para acceder a un nodo DOM administrado por React, primero, importe el gancho useRef:

import { useRef } from 'react';

Luego, úselo para declarar una referencia dentro de su componente:

const myRef = useRef(null);

Finalmente, páselo al nodo DOM como el atributo ref:

<div ref={myRef}>

El enlace useRef devuelve un objeto con una sola propiedad denominada current. Inicialmente, myRef.current será null. Cuando React crea un nodo DOM para este <div>, React pondrá una referencia a este nodo en myRef.current A continuación, puede acceder a este nodo DOM desde los controladores de eventos y utilizar las API de explorador integradas definidas en él.

// You can use any browser APIs, for example:
myRef.current.scrollIntoView();

Ejemplo: enfocar una entrada de texto
En este ejemplo, al hacer clic en el botón se enfocará la entrada:

...

Para implementar esto:

1. Declare inputRef con el gancho useRef.

2. Páselo como <input ref={inputRef}>. Esto le dice a React que ponga el nodo DOM de este <input> en inputRef.current<input>

3. En la función handleClick, lea el nodo DOM de entrada de inputRef.current y llame a focus() con inputRef.currentfocus() inputRef.current.focus().

4. Pase el controlador de eventos handleClick a <button> con onClick.

Si bien la manipulación DOM es el caso de uso más común para refs, useRef Hook se puede usar para almacenar otras cosas fuera de React, como ID de temporizador. De manera similar al estado, las referencias permanecen entre los renders. Las referencias son como variables de estado que no activan rerepresentaciones cuando las establece. Para obtener una introducción a las referencias, consulte https://beta.es.reactjs.org/learn/referencing-values-with-refs

Ejemplo: desplazarse a un elemento
Puede tener más de una referencia en un componente. En este ejemplo, hay un carrusel de tres imágenes. Cada botón centra una imagen llamando al método scrollIntoView() del navegador al nodo DOM correspondiente:

...

Acceso a los nodos DOM de otro componente
Cuando coloca una referencia en un componente incorporado que genera un elemento del navegador como <input />>, React establecerá la propiedad current de esa referencia en el nodo DOM correspondiente (como el <input /> real en el navegador).

Sin embargo, si intenta poner una referencia en su propio componente, como <MyInput />, de forma predeterminada obtendrá null. Aquí hay un ejemplo que lo demuestra. Observe cómo al hacer clic en el botón no se enfoca la entrada:

...

Para ayudarlo a notar el problema, React también imprime un error en la consola:

Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?

Esto sucede porque, de forma predeterminada, React no permite que un componente acceda a los nodos DOM de otros componentes. ¡Ni siquiera para sus propios hijos! Esto es intencional. Los refs son una escotilla de escape que debe usarse con moderación. La manipulación manual de los nodos DOM de otro componente hace que el código sea aún más frágil.

En su lugar, los componentes que desean exponer sus nodos DOM tienen que optar por ese comportamiento. Un componente puede especificar que "reenvíe" su referencia a uno de sus hijos. Así es como MyInput puede usar la API forwardRef:

...

Así es como funciona:

1. <MyInput ref={inputRef} /> le dice a React que coloque el nodo DOM correspondiente en inputRef.current Sin embargo, depende del componente MyInput optar por eso, de forma predeterminada, no lo hace.

2. El componente MyInput se declara mediante forwardRef. Esto opta por recibir el inputRef de arriba como el segundo argumento ref que se declara después de props.

3. MyInput pasa la ref que recibió a la <input> dentro de ella.
Ahora haciendo clic en el botón para enfocar la entrada funciona:

...

En los sistemas de diseño, es un patrón común para componentes de bajo nivel como botones, entradas, etc., reenviar sus referencias a sus nodos DOM. Por otro lado, los componentes de alto nivel como formularios, listas o secciones de página generalmente no expondrán sus nodos DOM para evitar dependencias accidentales en la estructura DOM.

Cuando React adjunta las referencias
En React, cada actualización se divide en dos fases.:

--Durante el renderizado, React llama a sus componentes para averiguar qué debería estar en la pantalla.

--Durante la confirmación, React aplica cambios al DOM.

En general, no desea acceder a las referencias durante el procesamiento. Eso también se aplica a las referencias que contienen nodos DOM. Durante el primer renderizado, los nodos DOM aún no se han creado, por lo que ref.current será null. Y durante la representación de actualizaciones, los nodos DOM aún no se han actualizado. Así que es demasiado pronto para leerlos.

React establece ref.current durante la confirmación. Antes de actualizar el DOM, React establece los valores ref.current afectados en null. Después de actualizar el DOM, React los establece inmediatamente en los nodos DOM correspondientes.

Por lo general, accederá a las referencias de los controladores de eventos. Si desea hacer algo con una referencia, pero no hay un evento en particular para hacerlo, es posible que necesite un efecto. Discutiremos los efectos en las páginas siguientes.

Prácticas recomendadas para la manipulación de DOM con refs

Los refs son una escotilla de escape. Solo debe usarlos cuando tenga que "salir de React". Ejemplos comunes de esto incluyen administrar el foco, la posición de desplazamiento o llamar a las API del navegador que React no expone.

Si te apegas a acciones no destructivas como enfocar y desplazarte, no deberías encontrar ningún problema. Sin embargo, si intenta modificar el DOM manualmente, puede correr el riesgo de entrar en conflicto con los cambios que React está realizando.

Para ilustrar este problema, este ejemplo incluye un mensaje de bienvenida y dos botones. El primer botón alterna su presencia utilizando la representación condicional y el estado, como lo haría normalmente en React. El segundo botón utiliza la API remove() DOM para eliminarla forzosamente del DOM fuera del control de React.

Intente presionar "Alternar con setState" varias veces. El mensaje debe desaparecer y volver a aparecer. Luego presione "Eliminar del DOM". Esto lo eliminará con fuerza. Finalmente, presione "Alternar con setState":

...

Después de haber eliminado manualmente el elemento DOM, intentar usar setState para mostrarlo de nuevo provocará un bloqueo. Esto se debe a que ha cambiado el DOM y React no sabe cómo continuar administrándolo correctamente.

Evite cambiar los nodos DOM administrados por React. Modificar, agregar hijos o eliminar elementos secundarios de los elementos administrados por React puede provocar resultados visuales inconsistentes o bloqueos como los anteriores.

Sin embargo, esto no significa que no puedas hacerlo en absoluto. Requiere precaución. Puede modificar de forma segura partes del DOM que React no tiene motivos para actualizar. Por ejemplo, si algún <div> siempre está vacío en el JSX, React no tendrá una razón para tocar su lista de hijos. Por lo tanto, es seguro agregar o eliminar elementos manualmente allí.