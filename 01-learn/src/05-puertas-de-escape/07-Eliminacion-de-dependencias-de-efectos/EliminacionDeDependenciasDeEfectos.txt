Eliminar dependencias de los Efectos
Cuando escribes un Efecto, el linter verificar√° que has incluido todos los valores reactivos (como las props y el estado) que tu Efecto lee en la lista de dependencias de tu Efecto. As√≠ se asegura que el Efecto se mantenga sincronizado con las √∫ltimas props y el √∫ltimo estado de tu componente. Dependencias innecesarias pueden ocasionar que tu Efecto se ejecute demasiadas veces, o incluso crear un ciclo infinito. Sigue esta gu√≠a para revisar y eliminar dependencias innecesarias de tus Efectos.

Aprender√°s
C√≥mo arreglar ciclos infinitos de dependencias de un Efecto
Qu√© hacer cuando quieres eliminar una dependencia
C√≥mo leer un valor en un Efecto sin ¬´reaccionar¬ª a √©l
C√≥mo y por qu√© evitar objectos y funciones como dependencias
Por qu√© suprimir la advertencia de la dependencia es peligroso, y qu√© hacer en su lugar

Las dependencias deben corresponderse con el c√≥digo
Cuando escribes un Efecto, primero debes especificar como iniciar y parar lo que sea que tu Efecto est√° haciendo.

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  	// ...
}

Entonces, si dejas la lista de dependencias del Efecto vac√≠a ([]), el linter sugerir√° las dependencias correctas:

...

Ll√©nalas de acuerdo a lo que dice el linter:

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); // ‚úÖ All dependencies declared
  // ...
}

Los Efectos ¬´reaccionar¬ª a valores reactivos. Dado que roomId es un valor reactivo (puede cambiar durante un rerenderizado), el linter verifica que lo has especificado como una dependencia. Si roomId recibe un valor diferente, React resincronizar√° tu Efecto. Esto asegura que el chat se mantiene conectado a la sala seleccionada y ¬´reacciona¬ª al dropdown:

Para eliminar una dependencia, prueba que no es una dependencia
Debes notar que no puedes ¬´escoger¬ª tus dependencias de tu Efecto. Cada valor reactivo que se usa en el c√≥digo de tu Efecto debe declararse en tu lista de dependencias. La lista de dependencias de tu Efecto est√° determinada por el c√≥digo a su alrededor:

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) { // Este es un valor reactivo
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Este Efecto lee el valor reactivo
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); // ‚úÖ Por tanto debes especificar el valor reactivo como una dependencia de tu Efecto
  // ...
}

Los valores reactivos incluyen las props y todas las variables y funciones declaradas directamente dentro de componente. Dado que roomId es un valor reactivo, no puedes eliminarlo de la lista de dependencias. El linter no lo permitir√≠a:

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, []); // üî¥ React Hook useEffect has a missing dependency: 'roomId'
  // ...
}

¬°Y el linter estar√≠a en lo correcto! Dado que roomId puede cambiar con el tiempo, esto introducir√≠a un bug en tu c√≥digo.

Para eliminar una dependencias, necesitas ¬´probarle¬ª al linter que no necesita ser una dependencia. Por ejemplo, puedes mover roomId fuera de componente para probar que no es reactivo y no cambiar√° entre rerenderizados:

const serverUrl = 'https://localhost:1234';
const roomId = 'music'; // Ya no es un valor reactivo

function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, []); // ‚úÖ Se declararon todas las dependencias
  // ...
}

Ahora que roomId no es un valor reactivo (y no puede cambiar en un rerenderizado) no necesita estar como dependencia:

https://codesandbox.io/s/opk4l4?file=%2FApp.js&utm_medium=sandpack

Por esto es que ahora podemos especificar una lista de dependencias vac√≠a ([]). Tu Efecto realmente no depende y de ning√∫n valor reactivo, por lo que realmente no necesita volverse a ejecutar cuando cualquiera de las props o el estado del componente cambie.