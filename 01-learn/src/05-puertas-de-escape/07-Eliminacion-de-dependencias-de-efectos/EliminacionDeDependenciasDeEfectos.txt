Eliminar dependencias de los Efectos
Cuando escribes un Efecto, el linter verificarÃ¡ que has incluido todos los valores reactivos (como las props y el estado) que tu Efecto lee en la lista de dependencias de tu Efecto. AsÃ­ se asegura que el Efecto se mantenga sincronizado con las Ãºltimas props y el Ãºltimo estado de tu componente. Dependencias innecesarias pueden ocasionar que tu Efecto se ejecute demasiadas veces, o incluso crear un ciclo infinito. Sigue esta guÃ­a para revisar y eliminar dependencias innecesarias de tus Efectos.

AprenderÃ¡s
CÃ³mo arreglar ciclos infinitos de dependencias de un Efecto
QuÃ© hacer cuando quieres eliminar una dependencia
CÃ³mo leer un valor en un Efecto sin Â«reaccionarÂ» a Ã©l
CÃ³mo y por quÃ© evitar objectos y funciones como dependencias
Por quÃ© suprimir la advertencia de la dependencia es peligroso, y quÃ© hacer en su lugar

Las dependencias deben corresponderse con el cÃ³digo
Cuando escribes un Efecto, primero debes especificar como iniciar y parar lo que sea que tu Efecto estÃ¡ haciendo.

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  	// ...
}

Entonces, si dejas la lista de dependencias del Efecto vacÃ­a ([]), el linter sugerirÃ¡ las dependencias correctas:

...

LlÃ©nalas de acuerdo a lo que dice el linter:

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); // âœ… All dependencies declared
  // ...
}

Los Efectos Â«reaccionarÂ» a valores reactivos. Dado que roomId es un valor reactivo (puede cambiar durante un rerenderizado), el linter verifica que lo has especificado como una dependencia. Si roomId recibe un valor diferente, React resincronizarÃ¡ tu Efecto. Esto asegura que el chat se mantiene conectado a la sala seleccionada y Â«reaccionaÂ» al dropdown:

Para eliminar una dependencia, prueba que no es una dependencia
Debes notar que no puedes Â«escogerÂ» tus dependencias de tu Efecto. Cada valor reactivo que se usa en el cÃ³digo de tu Efecto debe declararse en tu lista de dependencias. La lista de dependencias de tu Efecto estÃ¡ determinada por el cÃ³digo a su alrededor:

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) { // Este es un valor reactivo
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId); // Este Efecto lee el valor reactivo
    connection.connect();
    return () => connection.disconnect();
  }, [roomId]); // âœ… Por tanto debes especificar el valor reactivo como una dependencia de tu Efecto
  // ...
}

Los valores reactivos incluyen las props y todas las variables y funciones declaradas directamente dentro de componente. Dado que roomId es un valor reactivo, no puedes eliminarlo de la lista de dependencias. El linter no lo permitirÃ­a:

const serverUrl = 'https://localhost:1234';

function ChatRoom({ roomId }) {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, []); // ğŸ”´ React Hook useEffect has a missing dependency: 'roomId'
  // ...
}

Â¡Y el linter estarÃ­a en lo correcto! Dado que roomId puede cambiar con el tiempo, esto introducirÃ­a un bug en tu cÃ³digo.

Para eliminar una dependencias, necesitas Â«probarleÂ» al linter que no necesita ser una dependencia. Por ejemplo, puedes mover roomId fuera de componente para probar que no es reactivo y no cambiarÃ¡ entre rerenderizados:

const serverUrl = 'https://localhost:1234';
const roomId = 'music'; // Ya no es un valor reactivo

function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect();
    return () => connection.disconnect();
  }, []); // âœ… Se declararon todas las dependencias
  // ...
}

Ahora que roomId no es un valor reactivo (y no puede cambiar en un rerenderizado) no necesita estar como dependencia:

https://codesandbox.io/s/opk4l4?file=%2FApp.js&utm_medium=sandpack

Por esto es que ahora podemos especificar una lista de dependencias vacÃ­a ([]). Tu Efecto realmente no depende y de ningÃºn valor reactivo, por lo que realmente no necesita volverse a ejecutar cuando cualquiera de las props o el estado del componente cambie.

Para cambiar las dependencias, cambia el cÃ³digo
Puede que hayas notado un patrÃ³n en tu flujo de trabajo:

    1. Primero, cambias el cÃ³digo de tu Efecto o como se declaran los valores reactivos.
    2. Luego, sigues al linter y ajustas las dependencias para hacerlas corresponder con el cÃ³digo que cambiaste.
    3. Si no estÃ¡s a gusto con la lista de dependencias, puedes ir al primer paso (y cambiar el cÃ³digo nuevamente).

La Ãºltima parte es importante. Si quieres cambiar las dependencias, cambia primero el cÃ³digo que lo circunda. Puedes pensar en la lista de dependencia como una lista de todos los valores reactivos usado por el cÃ³digo de tu Efecto. No eliges intencionalmente quÃ© poner en esa lista. La lista describe tu cÃ³digo. Para cambiar la lista de dependencia, cambia el cÃ³digo.

Esto puede parecerse a resolver una ecuaciÃ³n. Puedes iniciar con un objetivo (por ejemplo, eliminar una dependencia), y necesitas Â«encontrarÂ» el cÃ³digo exacto que logre ese objetivo. No todo el mundo encuentra divertido resolver ecuaciones Â¡y lo mismo podrÃ­a decirse sobre escribir Efectos! Por suerte, debajo hay una lista de recetas comunes que puedes probar.

AtenciÃ³n
Si tienes una base de cÃ³digo existente, puede que tengas algunos Efectos que suprimen la advertencia de linter de esta forma:

useEffect(() => {
  // ...
  // ğŸ”´ Evita suprimir asÃ­ la advertencia del linter:
  // eslint-ignore-next-line react-hooks/exhaustive-dependencies
}, []);

Cuando las dependencias no se ajustan al cÃ³digo, hay un riesgo muy alto de introducir bugs. Al suprimir el linter, le mientes a React sobre los valores de los que depende tu Efecto. En su lugar, usa las tÃ©cnicas que se muestran debajo.

Eliminar dependencias innecesarias
Cada vez que ajustas las dependencias del Efecto para reflejar el cÃ³digo, mira a la lista de dependencias. Â¿Tiene sentido volver a correr cuando alguna de estas dependencias cambie? A veces, la respuesta es Â«noÂ»:

    --A veces, quieres volver a ejecutar diferentes partes de tu Efecto bajo condiciones diferentes.
    --A veces, quieres leer solo el Ãºltimo valor de alguna dependencia en lugar de Â«reaccionarÂ» a sus cambios.
    --A veces, una dependencia puede cambiar muy a menudo de forma no intencional porque es un objeto o una funciÃ³n.
    
Para encontrar la soluciÃ³n correcta, necesitas responder algunas preguntas sobre tu Efecto. RevisÃ©moslas.