JavaScript en JSX con llaves
JSX te permite escribir marcas similares a HTML dentro de un archivo JavaScript, manteniendo la lógica de renderizado y el contenido en el mismo lugar. A veces vas a querer agregar un poco de lógica JavaScript o hacer referencia a una propiedad dinámica dentro de ese marcado. En esta situación, puedes usar llaves en tu JSX para abrir una ventana a JavaScript.

Aprenderás
Cómo pasar strings con comillas
Cómo hacer referencia a una variable de JavaScript dentro de JSX con llaves
Cómo llamar una función de JavaScript dentro de JSX con llaves
Cómo usar un objeto de JavaScript dentro de JSX con llaves

Pasando strings con comillas 
Cuando desees pasar un atributo string a JSX, lo pones entre comillas simples o dobles:

 // <img
    //   className="avatar"
    //   src="https://i.imgur.com/7vQD0fPs.jpg"
    //   alt="Gregorio Y. Zara"
    // />

Aquí, "https://i.imgur.com/7vQD0fPs.jpg" y "Gregorio Y. Zara" están siendo pasados como strings.

Pero, ¿qué sucede si quieres especificar dinámicamente el texto src o alt? Puedes usar un valor de JavaScript reemplazando " y " con { y }:

 const avatar = "https://i.imgur.com/7vQD0fPs.jpg",
    description = "Gregorio Y. Zara";

  return (

    <img src={avatar} alt={description} className="avatar" />

    )

Observa la diferencia entre className="avatar", que especifica un nombre de clase CSS "avatar" que hace que la imagen sea redonda, y src={avatar} que lee el valor de una variable JavaScript llamada avatar. ¡Eso es porque las llaves te permiten trabajar con JavaScript allí mismo en tu marcado!.

Usando llaves: Una ventana al mundo de JavaScript 
JSX es una forma especial de escribir JavaScript. Esto significa que es posible usar JavaScript dentro el, con llaves { }. El siguiente ejemplo declara primero declara un nombre para el científico, name, luego lo incrusta con llaves dentro de <h1>:

export default function TodoList() {
  const name = 'Gregorio Y. Zara';
  return (
    <h1>{name}'s To Do List</h1>
  );
}

Intenta cambiar el valor de name de 'Gregorio Y. Zara' a 'Hedy Lamarr'. ¿Ves cómo cambia el título de la lista de tareas pendientes?

Cualquier expresión JavaScript funcionará entre llaves, incluidas las llamadas a funciones como formatDate():

Dónde usar llaves 
Solo puedes usar llaves de dos maneras dentro de JSX:

Como texto directamente dentro de una etiqueta JSX: <h1>{name}'s To Do List</h1> funciona, pero <{tag}>Gregorio Y. Zara's To Do List</{tag}> no lo hará.
Como atributos inmediatamente después del signo =: src={avatar} leerá la variable avatar, pero src="{avatar}" pasará el string {avatar}.

Usando “llaves dobles”: CSS y otros objetos en JSX 
Además de strings, números, y otras expresiones de JavaScript, incluso puedes pasar objetos en JSX. Los objetos también se indican con llaves, como { name: "Hedy Lamarr", inventions: 5 }. Por lo tanto, para pasar un objeto de JavaScript en JSX, debes envolver el objeto en otro par de llaves: person={{ name: "Hedy Lamarr", inventions: 5 }}.

Puedes ver esto con estilos CSS en línea en JSX. React no requiere que uses estilos en línea (las clases CSS funcionan muy bien en la mayoría de los casos). Pero cuando necesites un estilo en línea, pasa un objeto al atributo style:

Intenta cambiar los valores de backgroundColor y color.

Realmente puedes ver el objeto JavaScript dentro de las llaves cuando lo escribes así:

La próxima vez que veas {{ y }} en JSX, ¡sepa que no es más que un objeto dentro de las llaves de JSX!

Atención
Las propiedades de style en línea se escriben en camelCase. Por ejemplo, HTML <ul style="background-color: black"> se escribiría como <ul style={{ backgroundColor: 'black' }}> en tu componente.