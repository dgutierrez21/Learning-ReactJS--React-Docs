Renderizado de listas
A menudo querrás mostrar muchos componentes similares de una colección de datos. Puedes usar los métodos de array de JavaScript para manipular un array de datos. En esta página, usarás filter() y map() con React para filtrar y transformar tu array de datos en un array de componentes.

Aprenderás
Cómo renderizar componentes desde un array usando el método map() de JavaScript
Cómo renderizar solo un componente específico usando filter() de JavaScript
Cuándo y cómo usar las keys de React

Renderizar datos desde arrays 
Digamos que tienes una lista de contenido.

<ul>
  <li>Creola Katherine Johnson: mathematician</li>
  <li>Mario José Molina-Pasquel Henríquez: chemist</li>
  <li>Mohammad Abdus Salam: physicist</li>
  <li>Percy Lavon Julian: chemist</li>
  <li>Subrahmanyan Chandrasekhar: astrophysicist</li>
</ul>
La única diferencia entre esos elementos de la lista es su contenido, sus datos. A menudo necesitarás mostrar muchas instancias del mismo componente usando diferentes datos cuando construyas interfaces: desde listas de comentarios a galerías de fotos de perfiles. En estas situaciones, puedes guardar estos datos en objetos de JavaScript y arrays, y usar métodos como map() y filter() para renderizar listas de componentes desde ellos.

Aquí hay un corto ejemplo de como generar una lista de elementos de un array:

Mueve los datos en un array:
const people = [
  'Creola Katherine Johnson: mathematician',
  'Mario José Molina-Pasquel Henríquez: chemist',
  'Mohammad Abdus Salam: physicist',
  'Percy Lavon Julian: chemist',
  'Subrahmanyan Chandrasekhar: astrophysicist'
];
Mapea los miembros de people en un nuevo array de nodos JSX, listItems:
const listItems = people.map(person => <li>{person}</li>);
Devuelve listItems desde tu componente envuelto en un <ul>:
return <ul>{listItems}</ul>;

Date cuenta que el sandbox anterior muestra un error por consola:

Console
Warning: Each child in a list should have a unique “key” prop.

Aprenderás como arreglar este error más adelante en esta página. Antes de que lleguemos a eso, vamos a añadir algo de estructura a tus datos.

Filtrar arrays de objetos 
Estos datos pueden ser estructurados incluso más.

Digamos que quieres una manera de mostrar solo las personas cuya profesión sea 'chemist'. Puedes usar el método filter() de JavaScript para devolver solo esas personas. Este método coge un array de objetos, los pasa por un “test” (una función que devuelve true o false), y devuelve un nuevo array de solo esos objetos que han pasado el test (que han devuelto true).

Tú solo quieres  los objetos donde profession es 'chemist'. La función “test” para esto se ve como (person) => person.profession === 'chemist'. Aquí está cómo juntarlo:

1. Crea un nuevo array solo de personas que sean “químicos”, chemists, llamando al método filter() en people filtrando por person.profession === 'chemist':

2. Ahora mapea sobre chemists:

3. Por último, devuelve el listItems de tu componente:

Atención
Las funciones de flecha implícitamente devuelven la expresión justo después del =>, así que no necesitas declarar un return:

const listItems = chemists.map(person =>
  <li>...</li> // Implicit return!
);
Sin embargo, ¡debes escibir el return explícitamente si tu => está seguida por una llave{!

const listItems = chemists.map(person => { // Curly brace
  return <li>...</li>;
});
Las funciones de flecha que tienen => { se dice que tienen un “cuerpo de bloque”. Te permiten escribir más de una sola línea de código, pero  tienes que declarar un return por ti mismo. Si lo olvidas, ¡Nada será devuelto!