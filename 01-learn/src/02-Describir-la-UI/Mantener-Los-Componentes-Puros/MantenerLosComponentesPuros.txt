Mantener los componentes puros
Algunas funciones de JavaScript son puras. Las funciones puras solo realizan un cálculo y nada más. Al escribir estrictamente tus componentes como funciones puras, puedes evitar una clase completa de errores desconcertantes y un comportamiento impredecible a medida que crece tu base de código. Sin embargo, para obtener estos beneficios, hay algunas reglas que debes seguir.

Aprenderás
Qué es la pureza y cómo te ayuda a evitar errores
Cómo mantener los componentes puros manteniendo los cambios fuera de la fase de renderizado
Cómo usar el modo estricto para encontrar errores en tus componentes

Pureza: componentes como fórmulas 
En informática (y especialmente en el mundo de la programación funcional), una función pura es una función con las siguientes características:

Se ocupa de sus propios asuntos. No cambia ningún objeto o variable que existiera antes de ser llamado.
Las mismas entradas, la misma salida. Dadas las mismas entradas, una función pura siempre debe devolver el mismo resultado.
Es posible que ya estés familiarizado con un ejemplo de funciones puras: fórmulas en matemáticas.

Considera esta fórmula matemática: y = 2x.

Si x = 2 entonces y = 4. Siempre.

Si x = 3 entonces y = 6. Siempre.

Si x = 3, y a veces no será 9 o –1 o 2.5 dependiendo de la hora del día o del estado del mercado de valores.

Si y = 2x y x = 3, y siempre será 6.

Si convirtiéramos esto en una función de JavaScript, se vería así:

function double(number) {
  return 2 * number;
}
En el ejemplo anterior, double es una función pura. Si le pasas 3, devolverá 6. Siempre.

React está diseñado en torno a este concepto. React supone que cada componente que escribes es una función pura. Esto significa que los componentes que escribes en React siempre deben devolver el mismo JSX dadas las mismas entradas:

Cuando pasas drinkers={2} a Recipe, devolverá el JSX que contiene 2 cups of water. Siempre.

Si pasas drinkers={4}, devolverá el JSX que contiene 4 cups of water. Siempre.

Como una fórmula matemática.

Puedes pensar en tus componentes como recetas: si las sigues y no agregas nuevos ingredientes durante el proceso de cocción, obtendrás el mismo plato siempre. Ese “plato” es el JSX que el componente le pasa a React para renderizar.

Efectos secundarios: consecuencias (no)deseadas 
El proceso de renderizado de React siempre debe ser puro. Los componentes solo deben retornar su JSX, y no cambiar cualquier objeto o variable que existiera antes de renderizar: ¡Eso los haría impuros!

Aquí hay un componente que rompe esta regla:

Este componente está leyendo y escribiendo una variable guest declarada fuera de ella. Esto significa que llamar a este componente varias veces producirá diferente JSX! Y lo que es más, si otros componentes leen guest, también producirán diferente JSX, ¡dependiendo de cuándo se procesaron! Eso no es predecible.

Volviendo a nuestra fórmula y = 2x, ahora incluso si x = 2, no podemos confiar en que y = 4. Nuestras pruebas podrían fallar, nuestros usuarios estarían desconcertados, los aviones se caerían del cielo —¡puedes ver cómo esto conduciría a errores confusos!

Puedes arreglar este componente pasando guest como prop en su lugar:

Ahora tu componente ya es puro, ya que el JSX que devuelve solo depende de la prop invitados.

En general, no debes esperar que tus componentes se rendericen en ningún orden en particular. No importa si llamas y = 2x antes o después y = 5x: ambas fórmulas se resolverán independientemente una de la otra. Del mismo modo, cada componente solo debe “pensar por sí mismo” y no intentar coordinarse o depender de otros durante el renderizado. El renderizado es como un examen escolar: ¡cada componente debe calcular su JSX por su cuenta!

Mutación local: el pequeño secreto de tus componentes 
En el ejemplo anterior, el problema era que el componente cambiaba una variable preexistente mientras renderizaba. Esto a menudo se llama “mutación” para que suene un poco más aterrador. ¡Las funciones puras no mutan las variables fuera del alcance de la función ni los objetos que se crearon antes de la llamada —¡Eso las hace impuras!

Sin embargo, está completamente bien cambiar variables y objetos que acabas de crear mientras renderizas. En este ejemplo, creas un array [], lo asignas a la variable cups, y luego haces un push con una docena de tazas adentro:

¡Si la variable cups o el array [] se crearon fuera de la función TeaGathering, este sería un gran problema! Estarías cambiando un objeto preexistente haciendo push a ese array.

Sin embargo, está bien porque los has creado durante el mismo renderizado, dentro de TeaGathering. Ningún código fuera de TeaGathering sabrá nunca que esto ha ocurrido. Esto se llama “mutación local” —es como el pequeño secreto de tu componente.

¿Dónde puedes causar efectos secundarios? 
Si bien la programación funcional depende en gran medida de la pureza, en algún momento, en algún lugar, algo tiene que cambiar. ¡Ese es el punto en programación! Estos cambios —actualizar la pantalla, iniciar una animación, cambiar los datos— se llaman efectos secundarios. Son cosas que suceden “a un lado”, no durante el renderizado.

En React, los efectos secundarios generalmente deberían estar dentro de los manejadores de eventos. Los manejadores de eventos son funciones que React ejecuta cuando realiza alguna acción (por ejemplo, cuando haces clic en un botón). ¡Aunque los manejadores de eventos están definidos dentro de tu componente, no corren durante el renderizado! Por lo tanto, los manejadores de eventos no necesitan ser puros.

Si has agotado todas las demás opciones y no puedes encontrar el controlador de eventos adecuado para tu efecto secundario, aún puedes adjuntarlo en el retorno del JSX con un llamado a useEffect en tu componente. Esto le dice a React que lo ejecute más tarde, después del renderizado, cuando se permiten efectos secundarios. Sin embargo, este enfoque debería ser tu último recurso.

Cuando sea posible, intenta expresar tu lógica con un solo renderizado. ¡Te sorprenderá lo lejos que esto puede llevarte!

Recapitulación
-Lo que significa que un componente debe ser puro:
--Se ocupa de sus propios asuntos. No debe cambiar ningún objeto o variable --que existiera antes del renderizado.

-Las mismas entradas, la misma salida. Dadas las mismas entradas, un componente siempre debe devolver el mismo JSX.

-El renderizado puede ocurrir en cualquier momento, por lo que los componentes no deben depender de la secuencia de renderizado de los demás.

-No debe mutar ninguna de las entradas que usan sus componentes para renderizar. Eso incluye props, estado y contexto. Para actualizar la pantalla, “asignar” el estado en lugar de mutar objetos preexistentes.

-Esfuérzate por expresar la lógica de tu componente en el JSX. Cuando necesites “cambiar cosas”, generalmente querrás hacerlo en un manejador de eventos. Como último recurso, puedes usar useEffect.

-Escribir funciones puras requiere un poco de práctica, pero desbloquea el poder del paradigma de React.