Tu primer componente
Los componentes son uno de los conceptos esenciales de React. Constituyen los cimientos sobre los que construyes interfaces de usuario (UIs por sus siglas en ingl√©s). ¬°Y eso los convierte en el lugar perfecto para comenzar tu recorrido por React!

Aprender√°s
Qu√© es un componente
Qu√© papel desempe√±an los componentes en una aplicaci√≥n de React
C√≥mo escribir tu primer componente de React

Componentes: Elementos b√°sicos para construir UIs 
En la Web, HTML nos permite crear documentos estructurados con su conjunto integrado de etiquetas como <h1> y <li>:

<article>
  <h1>My First Component</h1>
  <ol>
    <li>Components: UI Building Blocks</li>
    <li>Defining a Component</li>
    <li>Using a Component</li>
  </ol>
</article>
Este marcado representa un art√≠culo <article>, su encabezado <h1>, y una tabla de contenidos (abreviada) representada como una lista ordenada <ol>. Un marcado como este, combinado con CSS para los estilos y JavaScript para la interactividad, est√°n detr√°s de cada barra lateral, avatar, modal, men√∫ desplegable y cualquier otra pieza de UI que ves en la web.

React te permite combinar tu marcado, CSS y JavaScript en ¬´componentes¬ª personalizados, elementos reutilizables de UI para tu aplicaci√≥n. El c√≥digo de la tabla de contenidos que viste arriba pudo haberse transformado en un componente <TableOfContents /> que podr√≠as renderizar en cada p√°gina. Por detr√°s, seguir√≠a utilizando las mismas etiquetas HTML como <article>, <h1>, etc.

De la misma forma que con las etiquetas HTML, puedes componer, ordenar y anidar componentes para dise√±ar p√°ginas completas. Por ejemplo la p√°gina de documentaci√≥n que est√°s leyendo est√° hecha de componentes de React:

<PageLayout>
  <NavigationHeader>
    <SearchBar />
    <Link to="/docs">Docs</Link>
  </NavigationHeader>
  <Sidebar />
  <PageContent>
    <TableOfContents />
    <DocumentationText />
  </PageContent>
</PageLayout>

En la medida en que tu proyecto crece, notar√°s que muchos de tus dise√±os se pueden componer mediante la reutilizaci√≥n de componentes que ya escribiste, acelerando el desarrollo. ¬°Nuestra tabla de contenido de arriba podr√≠a a√±adirse a cualquier pantalla con <TableOfContents />! Incluso puedes montar tu proyecto con los miles de componentes compartidos por la comunidad de c√≥digo abierto de React como Chakra UI y Material UI.

Y aqu√≠ veremos c√≥mo construir un componente:

Paso 1: Exporta el componente 
El prefijo export default es parte de la sintaxis est√°ndar de Javascript (no es espec√≠fico de React). Te permite marcar la funci√≥n principal en un archivo para que luego puedas importarlas en otros archivos. (¬°M√°s sobre importar en Importar y exportar componentes!).

Paso 2: Define la funci√≥n 
Con function Profile() { } defines una funci√≥n con el nombre Profile.

Atenci√≥n
¬°Los componentes de React son funciones regulares de JavaScript, pero sus nombres deben comenzar con letra may√∫scula o no funcionar√°n!

Paso 3: A√±ade marcado 
El componente retorna una etiqueta <img /> con atributos src y alt. <img /> se escribe como en HTML, ¬°pero en realidad es JavaScript por detr√°s! Esta sintaxis se llama JSX, y te permite incorporar marcado dentro de JavaScript.

Las sentencias return se pueden escribir todo en una l√≠nea, como en este componente:

Pero si tu marcado no est√° todo en la misma l√≠nea que la palabra clave return, debes ponerlo dentro de par√©ntesis como en este ejemplo:

return (
  <div>
    <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
  </div>
);

¬°Sin par√©ntesis, todo el c√≥digo que est√° en las l√≠neas posteriores al return ser√°n ignoradas!

Usar un componente 
Ahora que has definido tu componente Profile, puedes anidarlo dentro de otros componentes. Por ejemplo, puedes exportar un componente Gallery que utilice m√∫ltiples componentes Profile:

Lo que ve el navegador 
Nota la diferencia de may√∫sculas y min√∫sculas:

<section> est√° en min√∫sculas, por lo que React sabe que nos referimos a una etiqueta HTML.
<Profile /> comienza con una P may√∫scula, por lo que React sabe que queremos usar nuestro componente llamado Profile.
Y Profile contiene a√∫n m√°s HTML: <img />. Al final lo que el navegador ve es esto:

<section>
  <h1>Amazing scientists</h1>
  <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
  <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
  <img src="https://i.imgur.com/MK3eW3As.jpg" alt="Katherine Johnson" />
</section>

Anidar y organizar componentes 
Los componentes son funciones regulares de JavaScript, por lo que puedes tener m√∫ltiples componentes en el mismo archivo. Esto es conveniente cuando los componentes son relativamente peque√±os o est√°n estrechamente relacionados entre s√≠. Si este archivo se torna abarrotado, siempre puedes mover Profile a un archivo separado. Aprender√°s como hacer esto pronto en la p√°gina sobre imports.

Dado que los componentes Profile se renderizan dentro de Gallery ‚Äî¬°incluso varias veces!‚Äî podemos decir que Gallery es un componente padre, que renderiza cada Profile como un ¬´hijo¬ª. Este es la parte m√°gica de React: puedes definir un componente una vez, y luego usarlo en muchos lugares y tantas veces como quieras.

Atenci√≥n
Los componentes pueden renderizar otros componentes, pero nunca debes anidar sus definiciones:

export default function Gallery() {
  // üî¥ ¬°Nunca definas un componente dentro de otro componente!
  function Profile() {
    // ...
  }
  // ...
}
El fragmento de c√≥digo de arriba es muy lento y causa errores. En su lugar, define cada componente en el primer nivel:

export default function Gallery() {
  // ...
}

// ‚úÖ Declara los componentes en el primer nivel
function Profile() {
  // ...
}
Cuando un componente hijo necesita datos de su padre, p√°salo por props en lugar de anidar las definiciones.

Componentes de arriba a abajo 

Tu aplicaci√≥n de React comienza en un componente ¬´ra√≠z¬ª. Usualmente, se crea autom√°ticamente cuando inicias un nuevo proyecto. Por ejemplo, si utilizas CodeSandbox o Create React App, el componente ra√≠z se define en src/App.js. Si utilizas el framework Next.js, el componente ra√≠z se define en pages/index.js. En estos ejemplos, has estado exportando componentes ra√≠ces.

La mayor√≠a de las aplicaciones de React utilizan componentes de arriba a abajo. Esto significa que no solo usar√°s componentes para las piezas reutilizables como los botones, pero tambi√©n para piezas m√°s grandes como barras laterales, listas, ¬°y en √∫ltima instancia, p√°ginas completas! Los componentes son una forma √∫til de organizar c√≥digo de UI y marcado, incluso cuando algunos de ellos solo se utilicen una vez.

Frameworks como Next.js lo llevan un paso m√°s all√°. En lugar de usar un archivo HTML vac√≠o y dejar a React ¬´ocuparse¬ª de manejar la p√°gina con JavaScript, tambi√©n generan el HTML autom√°ticamente a partir de tus componentes de React. Esto permite que tu aplicaci√≥n muestre alg√∫n contenido antes de que el c√≥digo de JavaScript cargue.

A√∫n as√≠, muchos sitios web solo utilizan React para a√±adir ¬´peque√±as gotas de interactividad¬ª. Tienen muchos componentes ra√≠ces en lugar de uno solo para la p√°gina completa. Puedes utilizar tanto o tan poco de React como lo necesites.

Recapitulaci√≥n
¬°Acabas de probar por primera vez React! Recapitulemos algunos puntos clave.

React te permite crear componentes, elementos reutilizables de UI para tu aplicaci√≥n.

En una aplicaci√≥n de React, cada pieza de UI es un componente.

Los componentes de React son funciones regulares de JavaScript excepto que:

Sus nombres siempre empiezan con may√∫scula.
Retorna marcado JSX.