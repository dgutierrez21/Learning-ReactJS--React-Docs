Pasar propiedades a un componente
Los componentes de React usan propiedades para comunicarse entre sí. Cada componente padre puede pasar cierta información a sus componentes secundarios dándoles propiedades. Los propiedades pueden recordarle los atributos HTML, pero puede pasar cualquier valor de JavaScript a través de ellos, incluidos objetos, matrices y funciones.

Aprenderás

Cómo pasar propiedades a un componente
Cómo leer propiedades de un componente
Cómo especificar valores predeterminados para propiedades
Cómo pasar algo de JSX a un componente
Cómo cambian los propiedades con el tiempo

Propiedades familiares 
Las Propiedades son la información que se pasa a una etiqueta JSX. Por ejemplo, className, src, alt, width y height son algunos de los Propiedades que puede pasar a un <img>:

function Avatar() {
  return (
    <img
      className="avatar"
      src="https://i.imgur.com/1bX5QH6.jpg"
      alt="Lin Lanying"
      width={100}
      height={100}
    />
  );

Los Propiedades que puede pasar a una etiqueta <img> están predefinidos (ReactDOM cumple con el estándar HTML). Pero puedes pasar cualquier accesorio a tus propios componentes, como <Avatar>, para personalizarlos. ¡Así es cómo!

Pasar propiedades a un componente 
En este código, el componente Profile no pasa ningún accesorio a su componente secundario, Avatar:

export default function Profile() {
  return (
    <Avatar />
  );
}

Puedes darle a Avatar algunos propiedades en dos pasos.

Paso 1: Pasar propiedades al componente secundario 
Primero, pasa algunos propiedades a Avatar. Por ejemplo, pasemos dos propiedades: person (un objeto) y size (un número):

Si las llaves dobles después de person= te confunden, recuerda que son simplemente un objeto dentro de los rizos JSX.

Ahora puedes leer estos propiedades dentro del componente Avatar.

Paso 2: Leer propiedades dentro del componente secundario 
Puede leer estos propiedades enumerando sus nombres person, size separado por las comas dentro ({ y }) directamente después de la function Avatar. Esto te permite usarlos dentro del código de Avatar, como lo harías con una variable.

function Avatar({ person, size }) {
  // person and size are available here
}
Agregue algo de lógica a Avatar que use los propiedades de person y size para renderizar, y listo.

Ahora puedes configurar Avatar para renderizar de muchas maneras diferentes con diferentes propiedades. ¡Intenta ajustar los valores!

Los propiedades le permiten pensar en los componentes primarios e hijos de forma independiente. Por ejemplo, puedes cambiar la person o el size de los propiedades dentro de Profile sin tener que pensar en cómo los usa Avatar. Del mismo modo, puedes cambiar la forma en que el Avatar usa estos propiedades, sin mirar el Profile..

Puedes pensar en propiedades como "perillas" que puedes ajustar. Cumplen el mismo papel que los argumentos sirven para las funciones; de hecho, ¡los propiedades son el único argumento para su componente! Las funciones del componente React aceptan un solo argumento, un objeto props:

function Avatar(props) {
  let person = props.person;
  let size = props.size;
  // ...
}

Por lo general, no necesita todo el objeto props en sí, por lo que lo desestructura en accesorios individuales.

Atención
No te pierdas el par de rizos { y } dentro de ( y ) al declarar accesorios:

function Avatar({ person, size }) {
  // ...
}
Esta sintaxis se denomina "desestructuración" y equivale a leer propiedades de un parámetro de función:

function Avatar(props) {
  let person = props.person;
  let size = props.size;
  // ...
}

Especificación de un valor predeterminado para un prop 
Si desea dar a un prop un valor predeterminado al que recurrir cuando no se especifica ningún valor, puede hacerlo con la desestructuración poniendo = y el valor predeterminado justo después del parámetro:

Ahora, si <Avatar person={...} /> se renderiza sin tamaño prop, el size se establecerá en size 100.

El valor predeterminado solo se usa si falta el size o si pasa size={undefined}. Pero si pasa size=size={null} o size={0}, no se usará el valor predeterminado.

Reenvío de props con la sintaxis de propagación JSX 
A veces, pasar accesorios se vuelve muy repetitivo:

function Profile({ person, size, isSepia, thickBorder }) {
  return (
    <div className="card">
      <Avatar
        person={person}
        size={size}
        isSepia={isSepia}
        thickBorder={thickBorder}
      />
    </div>
  );
}
No hay nada malo con el código repetitivo, puede ser más legible. Pero a veces puedes valorar la concisión. Algunos componentes reenvían todos sus accesorios a sus hijos, como lo hace este Profile con Avatar. Debido a que no usan ninguno de sus accesorios directamente, puede tener sentido usar una sintaxis de "propagación" más concisa:

function Profile(props) {
  return (
    <div className="card">
      <Avatar {...props} />
    </div>
  );
}

Esto reenvía todos los accesorios del Profile al Avatar sin enumerar cada uno de sus nombres.

Utilice la sintaxis de propagación con moderación. Si lo está usando en todos los demás componentes, algo está mal. A menudo, indica que debe dividir sus componentes y pasar hijos como JSX. ¡Más sobre eso a continuación!

Pasar JSX como hijos 
Es común anidar etiquetas de navegador integradas:

<div>
  <img />
</div>

A veces querrás anidar tus propios componentes de la misma manera:

<Card>
  <Avatar />
</Card>

Cuando anida contenido dentro de una etiqueta JSX, el componente padre recibirá ese contenido en una propiedad llamada children. Por ejemplo, el componente Card a continuación recibirá un conjunto de propiedades children en <Avatar /> y lo renderizará en un div contenedor:

Intente reemplazar el <Avatar> dentro de <Avatar> con un poco <Card> texto para ver cómo el componente Card puede envolver cualquier contenido anidado. No necesita "saber" lo que se está renderizando dentro de él. Verás este patrón flexible en muchos lugares.

Puede pensar que un componente con un accesorio children tiene un "agujero" que puede ser "rellenado" por sus componentes padre con JSX arbitrario. A menudo usará el accesorio children para envoltorios visuales: paneles, cuadrículas, etc.

Cómo cambian las propiedades con el tiempo 
El componente Clock siguiente recibe dos accesorios de su componente principal: color y time. (El código del componente principal se omite porque usa estado, en el que aún no profundizaremos).

Intente cambiar el color en el cuadro de selección a continuación:

https://beta.es.reactjs.org/learn/passing-props-to-a-component#how-props-change-over-time

Este ejemplo ilustra que un componente puede recibir diferentes accesorios a lo largo del tiempo. ¡Los accesorios no siempre son estáticos! Aquí, el accesorio time cambia cada segundo, y el accesorio de color cambia cuando selecciona otro color. Los accesorios reflejan los datos de un componente en cualquier momento, en lugar de solo al principio.

Sin embargo, los accesorios son inmutables, un término de la informática que significa "inmutable". Cuando un componente necesita cambiar sus accesorios (por ejemplo, en respuesta a una interacción del usuario o nuevos datos), tendrá que "pedir" a su componente padre que le pase diferentes accesorios: ¡un nuevo objeto! Sus viejos accesorios serán dejados de lado, y eventualmente el motor JavaScript reclamará la memoria tomada por ellos.

No intentes "cambiar los accesorios". Cuando necesite responder a la entrada del usuario (como cambiar el color seleccionado), deberá "establecer estado", lo que puede obtener información en Estado: Memoria de un componente.

